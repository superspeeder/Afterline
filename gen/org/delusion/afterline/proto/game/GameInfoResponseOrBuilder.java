// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afterline/game.proto

package org.delusion.afterline.proto.game;

public interface GameInfoResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:afterline.GameInfoResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>fixed64 game_id = 1;</code>
   * @return The gameId.
   */
  long getGameId();

  /**
   * <pre>
   * Value of -1 will be returned if access is denied and if the game doesn't exist. Server will deny existance of games hidden from user. resources have access levels associated with them, as well as users in games. This determines what the user can and can't access. for debug purposes, sysadmins can use a secret and a forceaccess message to gain access to a resource
   * </pre>
   *
   * <code>int32 access_level = 2;</code>
   * @return The accessLevel.
   */
  int getAccessLevel();

  /**
   * <code>string name = 3;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <code>string name = 3;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * resource id of base ruleset
   * </pre>
   *
   * <code>fixed64 ruleset_id = 4;</code>
   * @return The rulesetId.
   */
  long getRulesetId();

  /**
   * <pre>
   * set of icons available
   * </pre>
   *
   * <code>.afterline.IconSetInfo icon_set = 5;</code>
   * @return Whether the iconSet field is set.
   */
  boolean hasIconSet();
  /**
   * <pre>
   * set of icons available
   * </pre>
   *
   * <code>.afterline.IconSetInfo icon_set = 5;</code>
   * @return The iconSet.
   */
  org.delusion.afterline.proto.asset.IconSetInfo getIconSet();
  /**
   * <pre>
   * set of icons available
   * </pre>
   *
   * <code>.afterline.IconSetInfo icon_set = 5;</code>
   */
  org.delusion.afterline.proto.asset.IconSetInfoOrBuilder getIconSetOrBuilder();

  /**
   * <code>repeated fixed64 members = 6;</code>
   * @return A list containing the members.
   */
  java.util.List<java.lang.Long> getMembersList();
  /**
   * <code>repeated fixed64 members = 6;</code>
   * @return The count of members.
   */
  int getMembersCount();
  /**
   * <code>repeated fixed64 members = 6;</code>
   * @param index The index of the element to return.
   * @return The members at the given index.
   */
  long getMembers(int index);

  /**
   * <code>uint32 max_players = 7;</code>
   * @return The maxPlayers.
   */
  int getMaxPlayers();

  /**
   * <pre>
   * gives a user_id for the game master
   * </pre>
   *
   * <code>fixed64 game_master = 8;</code>
   * @return The gameMaster.
   */
  long getGameMaster();

  /**
   * <code>bool running = 9;</code>
   * @return The running.
   */
  boolean getRunning();

  /**
   * <code>bool open = 10;</code>
   * @return The open.
   */
  boolean getOpen();
}
