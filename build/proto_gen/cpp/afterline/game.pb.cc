// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afterline/game.proto

#include "afterline/game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace afterline {
constexpr GameListRequest::GameListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , max_games_(0u){}
struct GameListRequestDefaultTypeInternal {
  constexpr GameListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameListRequestDefaultTypeInternal() {}
  union {
    GameListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameListRequestDefaultTypeInternal _GameListRequest_default_instance_;
constexpr GameListResponse::GameListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_ids_(){}
struct GameListResponseDefaultTypeInternal {
  constexpr GameListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameListResponseDefaultTypeInternal() {}
  union {
    GameListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameListResponseDefaultTypeInternal _GameListResponse_default_instance_;
constexpr GameInfoRequest::GameInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , game_id_(uint64_t{0u}){}
struct GameInfoRequestDefaultTypeInternal {
  constexpr GameInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameInfoRequestDefaultTypeInternal() {}
  union {
    GameInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameInfoRequestDefaultTypeInternal _GameInfoRequest_default_instance_;
constexpr GameInfoResponse::GameInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_set_(nullptr)
  , game_id_(uint64_t{0u})
  , ruleset_id_(uint64_t{0u})
  , access_level_(0)
  , max_players_(0u)
  , game_master_(uint64_t{0u})
  , running_(false)
  , open_(false){}
struct GameInfoResponseDefaultTypeInternal {
  constexpr GameInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameInfoResponseDefaultTypeInternal() {}
  union {
    GameInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameInfoResponseDefaultTypeInternal _GameInfoResponse_default_instance_;
constexpr JoinGameRequest::JoinGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , game_id_(uint64_t{0u}){}
struct JoinGameRequestDefaultTypeInternal {
  constexpr JoinGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameRequestDefaultTypeInternal() {}
  union {
    JoinGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameRequestDefaultTypeInternal _JoinGameRequest_default_instance_;
constexpr JoinGameResponse::JoinGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(uint64_t{0u})
  , status_(0)
{}
struct JoinGameResponseDefaultTypeInternal {
  constexpr JoinGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameResponseDefaultTypeInternal() {}
  union {
    JoinGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
}  // namespace afterline
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_afterline_2fgame_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_afterline_2fgame_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_afterline_2fgame_2eproto = nullptr;

const uint32_t TableStruct_afterline_2fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::afterline::GameListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GameListRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameListRequest, max_games_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GameListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GameListResponse, game_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoRequest, game_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, access_level_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, name_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, ruleset_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, icon_set_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, members_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, max_players_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, game_master_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, running_),
  PROTOBUF_FIELD_OFFSET(::afterline::GameInfoResponse, open_),
  ~0u,
  ~0u,
  0,
  2,
  1,
  ~0u,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameRequest, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::JoinGameResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::afterline::GameListRequest)},
  { 10, -1, -1, sizeof(::afterline::GameListResponse)},
  { 17, -1, -1, sizeof(::afterline::GameInfoRequest)},
  { 25, 41, -1, sizeof(::afterline::GameInfoResponse)},
  { 51, -1, -1, sizeof(::afterline::JoinGameRequest)},
  { 59, -1, -1, sizeof(::afterline::JoinGameResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GameListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GameListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GameInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GameInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_JoinGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_JoinGameResponse_default_instance_),
};

const char descriptor_table_protodef_afterline_2fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024afterline/game.proto\022\tafterline\032\025after"
  "line/asset.proto\"K\n\017GameListRequest\022\022\n\ns"
  "ession_id\030\001 \001(\006\022\026\n\tmax_games\030\002 \001(\rH\000\210\001\001B"
  "\014\n\n_max_games\"$\n\020GameListResponse\022\020\n\010gam"
  "e_ids\030\001 \003(\006\"6\n\017GameInfoRequest\022\022\n\nsessio"
  "n_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\"\334\002\n\020GameInfo"
  "Response\022\017\n\007game_id\030\001 \001(\006\022\024\n\014access_leve"
  "l\030\002 \001(\005\022\021\n\004name\030\003 \001(\tH\000\210\001\001\022\027\n\nruleset_id"
  "\030\004 \001(\006H\001\210\001\001\022-\n\010icon_set\030\005 \001(\0132\026.afterlin"
  "e.IconSetInfoH\002\210\001\001\022\017\n\007members\030\006 \003(\006\022\030\n\013m"
  "ax_players\030\007 \001(\rH\003\210\001\001\022\030\n\013game_master\030\010 \001"
  "(\006H\004\210\001\001\022\024\n\007running\030\t \001(\010H\005\210\001\001\022\021\n\004open\030\n "
  "\001(\010H\006\210\001\001B\007\n\005_nameB\r\n\013_ruleset_idB\013\n\t_ico"
  "n_setB\016\n\014_max_playersB\016\n\014_game_masterB\n\n"
  "\010_runningB\007\n\005_open\"6\n\017JoinGameRequest\022\022\n"
  "\nsession_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\"\212\001\n\020J"
  "oinGameResponse\022\017\n\007game_id\030\001 \001(\006\0222\n\006stat"
  "us\030\002 \001(\0162\".afterline.JoinGameResponse.St"
  "atus\"1\n\006Status\022\016\n\nDISALLOWED\020\000\022\013\n\007PENDIN"
  "G\020\001\022\n\n\006JOINED\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_afterline_2fgame_2eproto_deps[1] = {
  &::descriptor_table_afterline_2fasset_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_afterline_2fgame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afterline_2fgame_2eproto = {
  false, false, 783, descriptor_table_protodef_afterline_2fgame_2eproto, "afterline/game.proto", 
  &descriptor_table_afterline_2fgame_2eproto_once, descriptor_table_afterline_2fgame_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_afterline_2fgame_2eproto::offsets,
  file_level_metadata_afterline_2fgame_2eproto, file_level_enum_descriptors_afterline_2fgame_2eproto, file_level_service_descriptors_afterline_2fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_afterline_2fgame_2eproto_getter() {
  return &descriptor_table_afterline_2fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_afterline_2fgame_2eproto(&descriptor_table_afterline_2fgame_2eproto);
namespace afterline {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinGameResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_afterline_2fgame_2eproto);
  return file_level_enum_descriptors_afterline_2fgame_2eproto[0];
}
bool JoinGameResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JoinGameResponse_Status JoinGameResponse::DISALLOWED;
constexpr JoinGameResponse_Status JoinGameResponse::PENDING;
constexpr JoinGameResponse_Status JoinGameResponse::JOINED;
constexpr JoinGameResponse_Status JoinGameResponse::Status_MIN;
constexpr JoinGameResponse_Status JoinGameResponse::Status_MAX;
constexpr int JoinGameResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GameListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GameListRequest>()._has_bits_);
  static void set_has_max_games(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameListRequest::GameListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GameListRequest)
}
GameListRequest::GameListRequest(const GameListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_games_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(max_games_));
  // @@protoc_insertion_point(copy_constructor:afterline.GameListRequest)
}

inline void GameListRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_games_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(max_games_));
}

GameListRequest::~GameListRequest() {
  // @@protoc_insertion_point(destructor:afterline.GameListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListRequest::ArenaDtor(void* object) {
  GameListRequest* _this = reinterpret_cast< GameListRequest* >(object);
  (void)_this;
}
void GameListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GameListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  max_games_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_games = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_games(&has_bits);
          max_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GameListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // optional uint32 max_games = 2;
  if (_internal_has_max_games()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_games(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GameListRequest)
  return target;
}

size_t GameListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GameListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // optional uint32 max_games = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_games());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListRequest::GetClassData() const { return &_class_data_; }

void GameListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameListRequest *>(to)->MergeFrom(
      static_cast<const GameListRequest &>(from));
}


void GameListRequest::MergeFrom(const GameListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GameListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_has_max_games()) {
    _internal_set_max_games(from._internal_max_games());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListRequest::CopyFrom(const GameListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GameListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListRequest::IsInitialized() const {
  return true;
}

void GameListRequest::InternalSwap(GameListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameListRequest, max_games_)
      + sizeof(GameListRequest::max_games_)
      - PROTOBUF_FIELD_OFFSET(GameListRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[0]);
}

// ===================================================================

class GameListResponse::_Internal {
 public:
};

GameListResponse::GameListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  game_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GameListResponse)
}
GameListResponse::GameListResponse(const GameListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      game_ids_(from.game_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:afterline.GameListResponse)
}

inline void GameListResponse::SharedCtor() {
}

GameListResponse::~GameListResponse() {
  // @@protoc_insertion_point(destructor:afterline.GameListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameListResponse::ArenaDtor(void* object) {
  GameListResponse* _this = reinterpret_cast< GameListResponse* >(object);
  (void)_this;
}
void GameListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GameListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 game_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_game_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_game_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GameListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 game_ids = 1;
  if (this->_internal_game_ids_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_game_ids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GameListResponse)
  return target;
}

size_t GameListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GameListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 game_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_game_ids_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameListResponse::GetClassData() const { return &_class_data_; }

void GameListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameListResponse *>(to)->MergeFrom(
      static_cast<const GameListResponse &>(from));
}


void GameListResponse::MergeFrom(const GameListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GameListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  game_ids_.MergeFrom(from.game_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameListResponse::CopyFrom(const GameListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GameListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListResponse::IsInitialized() const {
  return true;
}

void GameListResponse::InternalSwap(GameListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  game_ids_.InternalSwap(&other->game_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[1]);
}

// ===================================================================

class GameInfoRequest::_Internal {
 public:
};

GameInfoRequest::GameInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GameInfoRequest)
}
GameInfoRequest::GameInfoRequest(const GameInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.GameInfoRequest)
}

inline void GameInfoRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
}

GameInfoRequest::~GameInfoRequest() {
  // @@protoc_insertion_point(destructor:afterline.GameInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameInfoRequest::ArenaDtor(void* object) {
  GameInfoRequest* _this = reinterpret_cast< GameInfoRequest* >(object);
  (void)_this;
}
void GameInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GameInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GameInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GameInfoRequest)
  return target;
}

size_t GameInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GameInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameInfoRequest::GetClassData() const { return &_class_data_; }

void GameInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameInfoRequest *>(to)->MergeFrom(
      static_cast<const GameInfoRequest &>(from));
}


void GameInfoRequest::MergeFrom(const GameInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GameInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameInfoRequest::CopyFrom(const GameInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GameInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfoRequest::IsInitialized() const {
  return true;
}

void GameInfoRequest::InternalSwap(GameInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameInfoRequest, game_id_)
      + sizeof(GameInfoRequest::game_id_)
      - PROTOBUF_FIELD_OFFSET(GameInfoRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[2]);
}

// ===================================================================

class GameInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GameInfoResponse>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ruleset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::afterline::IconSetInfo& icon_set(const GameInfoResponse* msg);
  static void set_has_icon_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_master(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_running(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::afterline::IconSetInfo&
GameInfoResponse::_Internal::icon_set(const GameInfoResponse* msg) {
  return *msg->icon_set_;
}
void GameInfoResponse::clear_icon_set() {
  if (icon_set_ != nullptr) icon_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GameInfoResponse::GameInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GameInfoResponse)
}
GameInfoResponse::GameInfoResponse(const GameInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_icon_set()) {
    icon_set_ = new ::afterline::IconSetInfo(*from.icon_set_);
  } else {
    icon_set_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(open_));
  // @@protoc_insertion_point(copy_constructor:afterline.GameInfoResponse)
}

inline void GameInfoResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&icon_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&open_) -
    reinterpret_cast<char*>(&icon_set_)) + sizeof(open_));
}

GameInfoResponse::~GameInfoResponse() {
  // @@protoc_insertion_point(destructor:afterline.GameInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete icon_set_;
}

void GameInfoResponse::ArenaDtor(void* object) {
  GameInfoResponse* _this = reinterpret_cast< GameInfoResponse* >(object);
  (void)_this;
}
void GameInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GameInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(icon_set_ != nullptr);
      icon_set_->Clear();
    }
  }
  game_id_ = uint64_t{0u};
  ruleset_id_ = uint64_t{0u};
  access_level_ = 0;
  if (cached_has_bits & 0x00000078u) {
    ::memset(&max_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&open_) -
        reinterpret_cast<char*>(&max_players_)) + sizeof(open_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // int32 access_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          access_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.GameInfoResponse.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ruleset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_ruleset_id(&has_bits);
          ruleset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .afterline.IconSetInfo icon_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_icon_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 members = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_members(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_members(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_players(&has_bits);
          max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_master = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_game_master(&has_bits);
          game_master_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool running = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_running(&has_bits);
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool open = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_open(&has_bits);
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GameInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // int32 access_level = 2;
  if (this->_internal_access_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_access_level(), target);
  }

  // optional string name = 3;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.GameInfoResponse.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional fixed64 ruleset_id = 4;
  if (_internal_has_ruleset_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_ruleset_id(), target);
  }

  // optional .afterline.IconSetInfo icon_set = 5;
  if (_internal_has_icon_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::icon_set(this), target, stream);
  }

  // repeated fixed64 members = 6;
  if (this->_internal_members_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_members(), target);
  }

  // optional uint32 max_players = 7;
  if (_internal_has_max_players()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_players(), target);
  }

  // optional fixed64 game_master = 8;
  if (_internal_has_game_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_game_master(), target);
  }

  // optional bool running = 9;
  if (_internal_has_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_running(), target);
  }

  // optional bool open = 10;
  if (_internal_has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GameInfoResponse)
  return target;
}

size_t GameInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GameInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 members = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_members_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .afterline.IconSetInfo icon_set = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_set_);
    }

  }
  // fixed64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 ruleset_id = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 8;
  }

  // int32 access_level = 2;
  if (this->_internal_access_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_access_level());
  }

  if (cached_has_bits & 0x00000078u) {
    // optional uint32 max_players = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_players());
    }

    // optional fixed64 game_master = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool running = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool open = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameInfoResponse::GetClassData() const { return &_class_data_; }

void GameInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameInfoResponse *>(to)->MergeFrom(
      static_cast<const GameInfoResponse &>(from));
}


void GameInfoResponse::MergeFrom(const GameInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GameInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_icon_set()->::afterline::IconSetInfo::MergeFrom(from._internal_icon_set());
    }
  }
  if (from._internal_game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_ruleset_id(from._internal_ruleset_id());
  }
  if (from._internal_access_level() != 0) {
    _internal_set_access_level(from._internal_access_level());
  }
  if (cached_has_bits & 0x00000078u) {
    if (cached_has_bits & 0x00000008u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_master_ = from.game_master_;
    }
    if (cached_has_bits & 0x00000020u) {
      running_ = from.running_;
    }
    if (cached_has_bits & 0x00000040u) {
      open_ = from.open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameInfoResponse::CopyFrom(const GameInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GameInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfoResponse::IsInitialized() const {
  return true;
}

void GameInfoResponse::InternalSwap(GameInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameInfoResponse, open_)
      + sizeof(GameInfoResponse::open_)
      - PROTOBUF_FIELD_OFFSET(GameInfoResponse, icon_set_)>(
          reinterpret_cast<char*>(&icon_set_),
          reinterpret_cast<char*>(&other->icon_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[3]);
}

// ===================================================================

class JoinGameRequest::_Internal {
 public:
};

JoinGameRequest::JoinGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.JoinGameRequest)
}
JoinGameRequest::JoinGameRequest(const JoinGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.JoinGameRequest)
}

inline void JoinGameRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
}

JoinGameRequest::~JoinGameRequest() {
  // @@protoc_insertion_point(destructor:afterline.JoinGameRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinGameRequest::ArenaDtor(void* object) {
  JoinGameRequest* _this = reinterpret_cast< JoinGameRequest* >(object);
  (void)_this;
}
void JoinGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.JoinGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(game_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.JoinGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.JoinGameRequest)
  return target;
}

size_t JoinGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.JoinGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameRequest::GetClassData() const { return &_class_data_; }

void JoinGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinGameRequest *>(to)->MergeFrom(
      static_cast<const JoinGameRequest &>(from));
}


void JoinGameRequest::MergeFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.JoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameRequest::CopyFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.JoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameRequest::IsInitialized() const {
  return true;
}

void JoinGameRequest::InternalSwap(JoinGameRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameRequest, game_id_)
      + sizeof(JoinGameRequest::game_id_)
      - PROTOBUF_FIELD_OFFSET(JoinGameRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[4]);
}

// ===================================================================

class JoinGameResponse::_Internal {
 public:
};

JoinGameResponse::JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.JoinGameResponse)
}
JoinGameResponse::JoinGameResponse(const JoinGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:afterline.JoinGameResponse)
}

inline void JoinGameResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(status_));
}

JoinGameResponse::~JoinGameResponse() {
  // @@protoc_insertion_point(destructor:afterline.JoinGameResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinGameResponse::ArenaDtor(void* object) {
  JoinGameResponse* _this = reinterpret_cast< JoinGameResponse* >(object);
  (void)_this;
}
void JoinGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.JoinGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .afterline.JoinGameResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::afterline::JoinGameResponse_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.JoinGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_game_id(), target);
  }

  // .afterline.JoinGameResponse.Status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.JoinGameResponse)
  return target;
}

size_t JoinGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.JoinGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += 1 + 8;
  }

  // .afterline.JoinGameResponse.Status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameResponse::GetClassData() const { return &_class_data_; }

void JoinGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinGameResponse *>(to)->MergeFrom(
      static_cast<const JoinGameResponse &>(from));
}


void JoinGameResponse::MergeFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameResponse::CopyFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResponse::IsInitialized() const {
  return true;
}

void JoinGameResponse::InternalSwap(JoinGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameResponse, status_)
      + sizeof(JoinGameResponse::status_)
      - PROTOBUF_FIELD_OFFSET(JoinGameResponse, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fgame_2eproto_getter, &descriptor_table_afterline_2fgame_2eproto_once,
      file_level_metadata_afterline_2fgame_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace afterline
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::afterline::GameListRequest* Arena::CreateMaybeMessage< ::afterline::GameListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GameListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GameListResponse* Arena::CreateMaybeMessage< ::afterline::GameListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GameListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GameInfoRequest* Arena::CreateMaybeMessage< ::afterline::GameInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GameInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GameInfoResponse* Arena::CreateMaybeMessage< ::afterline::GameInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GameInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::JoinGameRequest* Arena::CreateMaybeMessage< ::afterline::JoinGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::JoinGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::JoinGameResponse* Arena::CreateMaybeMessage< ::afterline::JoinGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::JoinGameResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
