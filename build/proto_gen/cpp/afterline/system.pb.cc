// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afterline/system.proto

#include "afterline/system.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace afterline {
constexpr FederatedLoginRequest::FederatedLoginRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remember_me_(false){}
struct FederatedLoginRequestDefaultTypeInternal {
  constexpr FederatedLoginRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLoginRequestDefaultTypeInternal() {}
  union {
    FederatedLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLoginRequestDefaultTypeInternal _FederatedLoginRequest_default_instance_;
constexpr FederatedLoginResponse::FederatedLoginResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FederatedLoginResponseDefaultTypeInternal {
  constexpr FederatedLoginResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLoginResponseDefaultTypeInternal() {}
  union {
    FederatedLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLoginResponseDefaultTypeInternal _FederatedLoginResponse_default_instance_;
constexpr FederatedLoginComplete::FederatedLoginComplete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_session_id_(uint64_t{0u}){}
struct FederatedLoginCompleteDefaultTypeInternal {
  constexpr FederatedLoginCompleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLoginCompleteDefaultTypeInternal() {}
  union {
    FederatedLoginComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLoginCompleteDefaultTypeInternal _FederatedLoginComplete_default_instance_;
constexpr FederatedLoginTimeout::FederatedLoginTimeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FederatedLoginTimeoutDefaultTypeInternal {
  constexpr FederatedLoginTimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLoginTimeoutDefaultTypeInternal() {}
  union {
    FederatedLoginTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLoginTimeoutDefaultTypeInternal _FederatedLoginTimeout_default_instance_;
constexpr CancelFederatedLogin::CancelFederatedLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CancelFederatedLoginDefaultTypeInternal {
  constexpr CancelFederatedLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelFederatedLoginDefaultTypeInternal() {}
  union {
    CancelFederatedLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelFederatedLoginDefaultTypeInternal _CancelFederatedLogin_default_instance_;
constexpr FederatedLogOutRequest::FederatedLogOutRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_session_id_(uint64_t{0u}){}
struct FederatedLogOutRequestDefaultTypeInternal {
  constexpr FederatedLogOutRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLogOutRequestDefaultTypeInternal() {}
  union {
    FederatedLogOutRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLogOutRequestDefaultTypeInternal _FederatedLogOutRequest_default_instance_;
constexpr FederatedLogOutResponse::FederatedLogOutResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succeeded_(false){}
struct FederatedLogOutResponseDefaultTypeInternal {
  constexpr FederatedLogOutResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FederatedLogOutResponseDefaultTypeInternal() {}
  union {
    FederatedLogOutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FederatedLogOutResponseDefaultTypeInternal _FederatedLogOutResponse_default_instance_;
constexpr ValidateSessionIdRequest::ValidateSessionIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_session_id_(uint64_t{0u}){}
struct ValidateSessionIdRequestDefaultTypeInternal {
  constexpr ValidateSessionIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateSessionIdRequestDefaultTypeInternal() {}
  union {
    ValidateSessionIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateSessionIdRequestDefaultTypeInternal _ValidateSessionIdRequest_default_instance_;
constexpr ValidateSessionIdResponse::ValidateSessionIdResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : valid_(false){}
struct ValidateSessionIdResponseDefaultTypeInternal {
  constexpr ValidateSessionIdResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateSessionIdResponseDefaultTypeInternal() {}
  union {
    ValidateSessionIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateSessionIdResponseDefaultTypeInternal _ValidateSessionIdResponse_default_instance_;
constexpr Disconnect::Disconnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct DisconnectDefaultTypeInternal {
  constexpr DisconnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DisconnectDefaultTypeInternal() {}
  union {
    Disconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DisconnectDefaultTypeInternal _Disconnect_default_instance_;
constexpr Connect::Connect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct ConnectDefaultTypeInternal {
  constexpr ConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectDefaultTypeInternal() {}
  union {
    Connect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectDefaultTypeInternal _Connect_default_instance_;
constexpr GetUserStatusRequest::GetUserStatusRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u})
  , available_(false){}
struct GetUserStatusRequestDefaultTypeInternal {
  constexpr GetUserStatusRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetUserStatusRequestDefaultTypeInternal() {}
  union {
    GetUserStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetUserStatusRequestDefaultTypeInternal _GetUserStatusRequest_default_instance_;
constexpr GetPublicUserInfoRequest::GetPublicUserInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u}){}
struct GetPublicUserInfoRequestDefaultTypeInternal {
  constexpr GetPublicUserInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPublicUserInfoRequestDefaultTypeInternal() {}
  union {
    GetPublicUserInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPublicUserInfoRequestDefaultTypeInternal _GetPublicUserInfoRequest_default_instance_;
constexpr GetPublicUserInfoResponse_PublicUserInfo::GetPublicUserInfoResponse_PublicUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_games_joined_()
  , friends_()
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_status_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_set_(nullptr)
  , status_(0)
{}
struct GetPublicUserInfoResponse_PublicUserInfoDefaultTypeInternal {
  constexpr GetPublicUserInfoResponse_PublicUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPublicUserInfoResponse_PublicUserInfoDefaultTypeInternal() {}
  union {
    GetPublicUserInfoResponse_PublicUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPublicUserInfoResponse_PublicUserInfoDefaultTypeInternal _GetPublicUserInfoResponse_PublicUserInfo_default_instance_;
constexpr GetPublicUserInfoResponse::GetPublicUserInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_info_(nullptr)
  , user_id_(uint64_t{0u}){}
struct GetPublicUserInfoResponseDefaultTypeInternal {
  constexpr GetPublicUserInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPublicUserInfoResponseDefaultTypeInternal() {}
  union {
    GetPublicUserInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPublicUserInfoResponseDefaultTypeInternal _GetPublicUserInfoResponse_default_instance_;
constexpr GetUserIDRequest::GetUserIDRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u}){}
struct GetUserIDRequestDefaultTypeInternal {
  constexpr GetUserIDRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetUserIDRequestDefaultTypeInternal() {}
  union {
    GetUserIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetUserIDRequestDefaultTypeInternal _GetUserIDRequest_default_instance_;
constexpr GetUserIDResponse::GetUserIDResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u}){}
struct GetUserIDResponseDefaultTypeInternal {
  constexpr GetUserIDResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetUserIDResponseDefaultTypeInternal() {}
  union {
    GetUserIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetUserIDResponseDefaultTypeInternal _GetUserIDResponse_default_instance_;
constexpr FindUserRequest::FindUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_term_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u}){}
struct FindUserRequestDefaultTypeInternal {
  constexpr FindUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindUserRequestDefaultTypeInternal() {}
  union {
    FindUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindUserRequestDefaultTypeInternal _FindUserRequest_default_instance_;
constexpr FindUserResponse::FindUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_(){}
struct FindUserResponseDefaultTypeInternal {
  constexpr FindUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindUserResponseDefaultTypeInternal() {}
  union {
    FindUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindUserResponseDefaultTypeInternal _FindUserResponse_default_instance_;
constexpr BlockUserRequest::BlockUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u})
  , block_(false){}
struct BlockUserRequestDefaultTypeInternal {
  constexpr BlockUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockUserRequestDefaultTypeInternal() {}
  union {
    BlockUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockUserRequestDefaultTypeInternal _BlockUserRequest_default_instance_;
constexpr BlockUserResponse::BlockUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u})
  , successful_(false){}
struct BlockUserResponseDefaultTypeInternal {
  constexpr BlockUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockUserResponseDefaultTypeInternal() {}
  union {
    BlockUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockUserResponseDefaultTypeInternal _BlockUserResponse_default_instance_;
constexpr FriendUserRequest::FriendUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u}){}
struct FriendUserRequestDefaultTypeInternal {
  constexpr FriendUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendUserRequestDefaultTypeInternal() {}
  union {
    FriendUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendUserRequestDefaultTypeInternal _FriendUserRequest_default_instance_;
constexpr FriendUserResponse::FriendUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u}){}
struct FriendUserResponseDefaultTypeInternal {
  constexpr FriendUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendUserResponseDefaultTypeInternal() {}
  union {
    FriendUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendUserResponseDefaultTypeInternal _FriendUserResponse_default_instance_;
constexpr UnFriendUserRequest::UnFriendUserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(uint64_t{0u})
  , user_id_(uint64_t{0u}){}
struct UnFriendUserRequestDefaultTypeInternal {
  constexpr UnFriendUserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnFriendUserRequestDefaultTypeInternal() {}
  union {
    UnFriendUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnFriendUserRequestDefaultTypeInternal _UnFriendUserRequest_default_instance_;
constexpr UnFriendUserResponse::UnFriendUserResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(uint64_t{0u})
  , successful_(false){}
struct UnFriendUserResponseDefaultTypeInternal {
  constexpr UnFriendUserResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnFriendUserResponseDefaultTypeInternal() {}
  union {
    UnFriendUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnFriendUserResponseDefaultTypeInternal _UnFriendUserResponse_default_instance_;
}  // namespace afterline
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_afterline_2fsystem_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_afterline_2fsystem_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_afterline_2fsystem_2eproto = nullptr;

const uint32_t TableStruct_afterline_2fsystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginRequest, remember_me_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginResponse, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginComplete, client_session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginComplete, user_email_),
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginComplete, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLoginTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::CancelFederatedLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLogOutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLogOutRequest, client_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLogOutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FederatedLogOutResponse, succeeded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::ValidateSessionIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::ValidateSessionIdRequest, client_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::ValidateSessionIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::ValidateSessionIdResponse, valid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::Disconnect, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::Connect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::afterline::Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::Connect, session_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserStatusRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserStatusRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserStatusRequest, available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, username_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, display_name_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, user_desc_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, user_status_msg_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, status_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, icon_set_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, public_games_joined_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse_PublicUserInfo, friends_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::GetPublicUserInfoResponse, user_info_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserIDRequest, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::GetUserIDResponse, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FindUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FindUserRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::FindUserRequest, search_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FindUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FindUserResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserRequest, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::BlockUserResponse, successful_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::FriendUserResponse, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::afterline::UnFriendUserResponse, successful_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::afterline::FederatedLoginRequest)},
  { 7, -1, -1, sizeof(::afterline::FederatedLoginResponse)},
  { 14, -1, -1, sizeof(::afterline::FederatedLoginComplete)},
  { 23, -1, -1, sizeof(::afterline::FederatedLoginTimeout)},
  { 29, -1, -1, sizeof(::afterline::CancelFederatedLogin)},
  { 35, -1, -1, sizeof(::afterline::FederatedLogOutRequest)},
  { 42, -1, -1, sizeof(::afterline::FederatedLogOutResponse)},
  { 49, -1, -1, sizeof(::afterline::ValidateSessionIdRequest)},
  { 56, -1, -1, sizeof(::afterline::ValidateSessionIdResponse)},
  { 63, -1, -1, sizeof(::afterline::Disconnect)},
  { 70, 77, -1, sizeof(::afterline::Connect)},
  { 78, -1, -1, sizeof(::afterline::GetUserStatusRequest)},
  { 87, -1, -1, sizeof(::afterline::GetPublicUserInfoRequest)},
  { 95, 109, -1, sizeof(::afterline::GetPublicUserInfoResponse_PublicUserInfo)},
  { 117, 125, -1, sizeof(::afterline::GetPublicUserInfoResponse)},
  { 127, -1, -1, sizeof(::afterline::GetUserIDRequest)},
  { 134, -1, -1, sizeof(::afterline::GetUserIDResponse)},
  { 141, -1, -1, sizeof(::afterline::FindUserRequest)},
  { 149, -1, -1, sizeof(::afterline::FindUserResponse)},
  { 156, -1, -1, sizeof(::afterline::BlockUserRequest)},
  { 165, -1, -1, sizeof(::afterline::BlockUserResponse)},
  { 174, -1, -1, sizeof(::afterline::FriendUserRequest)},
  { 182, -1, -1, sizeof(::afterline::FriendUserResponse)},
  { 190, -1, -1, sizeof(::afterline::UnFriendUserRequest)},
  { 198, -1, -1, sizeof(::afterline::UnFriendUserResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLoginComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLoginTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_CancelFederatedLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLogOutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FederatedLogOutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_ValidateSessionIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_ValidateSessionIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_Disconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetUserStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetPublicUserInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetPublicUserInfoResponse_PublicUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetPublicUserInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetUserIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_GetUserIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FindUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FindUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_BlockUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_BlockUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FriendUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_FriendUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_UnFriendUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::afterline::_UnFriendUserResponse_default_instance_),
};

const char descriptor_table_protodef_afterline_2fsystem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026afterline/system.proto\022\tafterline\032\025aft"
  "erline/asset.proto\032\024afterline/game.proto"
  "\",\n\025FederatedLoginRequest\022\023\n\013remember_me"
  "\030\001 \001(\010\"&\n\026FederatedLoginResponse\022\014\n\004link"
  "\030\001 \001(\t\"Z\n\026FederatedLoginComplete\022\031\n\021clie"
  "nt_session_id\030\001 \001(\006\022\022\n\nuser_email\030\002 \001(\t\022"
  "\021\n\tuser_name\030\003 \001(\t\"\027\n\025FederatedLoginTime"
  "out\"\026\n\024CancelFederatedLogin\"3\n\026Federated"
  "LogOutRequest\022\031\n\021client_session_id\030\001 \001(\006"
  "\",\n\027FederatedLogOutResponse\022\021\n\tsucceeded"
  "\030\001 \001(\010\"5\n\030ValidateSessionIdRequest\022\031\n\021cl"
  "ient_session_id\030\001 \001(\006\"*\n\031ValidateSession"
  "IdResponse\022\r\n\005valid\030\001 \001(\010\" \n\nDisconnect\022"
  "\022\n\nsession_id\030\001 \001(\006\"1\n\007Connect\022\027\n\nsessio"
  "n_id\030\001 \001(\006H\000\210\001\001B\r\n\013_session_id\"N\n\024GetUse"
  "rStatusRequest\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007us"
  "er_id\030\002 \001(\006\022\021\n\tavailable\030\003 \001(\010\"\?\n\030GetPub"
  "licUserInfoRequest\022\022\n\nsession_id\030\001 \001(\006\022\017"
  "\n\007user_id\030\002 \001(\006\"\226\004\n\031GetPublicUserInfoRes"
  "ponse\022\017\n\007user_id\030\001 \001(\006\022K\n\tuser_info\030\002 \001("
  "\01323.afterline.GetPublicUserInfoResponse."
  "PublicUserInfoH\000\210\001\001\032\214\003\n\016PublicUserInfo\022\020"
  "\n\010username\030\001 \001(\t\022\031\n\014display_name\030\002 \001(\tH\000"
  "\210\001\001\022\026\n\tuser_desc\030\003 \001(\tH\001\210\001\001\022\034\n\017user_stat"
  "us_msg\030\004 \001(\tH\002\210\001\001\022J\n\006status\030\005 \001(\0162:.afte"
  "rline.GetPublicUserInfoResponse.PublicUs"
  "erInfo.Status\022-\n\010icon_set\030\006 \001(\0132\026.afterl"
  "ine.IconSetInfoH\003\210\001\001\022\033\n\023public_games_joi"
  "ned\030\007 \003(\006\022\017\n\007friends\030\010 \003(\006\".\n\006Status\022\013\n\007"
  "OFFLINE\020\000\022\n\n\006ONLINE\020\001\022\013\n\007IN_GAME\020\002B\017\n\r_d"
  "isplay_nameB\014\n\n_user_descB\022\n\020_user_statu"
  "s_msgB\013\n\t_icon_setB\014\n\n_user_info\"&\n\020GetU"
  "serIDRequest\022\022\n\nsession_id\030\001 \001(\006\"$\n\021GetU"
  "serIDResponse\022\017\n\007user_id\030\001 \001(\006\":\n\017FindUs"
  "erRequest\022\022\n\nsession_id\030\001 \001(\006\022\023\n\013search_"
  "term\030\002 \001(\t\"!\n\020FindUserResponse\022\r\n\005users\030"
  "\001 \003(\006\"F\n\020BlockUserRequest\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007user_id\030\002 \001(\006\022\r\n\005block\030\003 \001(\010\"L\n"
  "\021BlockUserResponse\022\022\n\nsession_id\030\001 \001(\006\022\017"
  "\n\007user_id\030\002 \001(\006\022\022\n\nsuccessful\030\003 \001(\010\"8\n\021F"
  "riendUserRequest\022\022\n\nsession_id\030\001 \001(\006\022\017\n\007"
  "user_id\030\002 \001(\006\"k\n\022FriendUserResponse\022\022\n\ns"
  "ession_id\030\001 \001(\006\022\017\n\007user_id\030\002 \001(\006\"0\n\006Stat"
  "us\022\013\n\007PENDING\020\000\022\013\n\007BLOCKED\020\001\022\014\n\010ACCEPTED"
  "\020\002\":\n\023UnFriendUserRequest\022\022\n\nsession_id\030"
  "\001 \001(\006\022\017\n\007user_id\030\002 \001(\006\";\n\024UnFriendUserRe"
  "sponse\022\017\n\007user_id\030\001 \001(\006\022\022\n\nsuccessful\030\002 "
  "\001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_afterline_2fsystem_2eproto_deps[2] = {
  &::descriptor_table_afterline_2fasset_2eproto,
  &::descriptor_table_afterline_2fgame_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_afterline_2fsystem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afterline_2fsystem_2eproto = {
  false, false, 1891, descriptor_table_protodef_afterline_2fsystem_2eproto, "afterline/system.proto", 
  &descriptor_table_afterline_2fsystem_2eproto_once, descriptor_table_afterline_2fsystem_2eproto_deps, 2, 25,
  schemas, file_default_instances, TableStruct_afterline_2fsystem_2eproto::offsets,
  file_level_metadata_afterline_2fsystem_2eproto, file_level_enum_descriptors_afterline_2fsystem_2eproto, file_level_service_descriptors_afterline_2fsystem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_afterline_2fsystem_2eproto_getter() {
  return &descriptor_table_afterline_2fsystem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_afterline_2fsystem_2eproto(&descriptor_table_afterline_2fsystem_2eproto);
namespace afterline {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPublicUserInfoResponse_PublicUserInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_afterline_2fsystem_2eproto);
  return file_level_enum_descriptors_afterline_2fsystem_2eproto[0];
}
bool GetPublicUserInfoResponse_PublicUserInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetPublicUserInfoResponse_PublicUserInfo_Status GetPublicUserInfoResponse_PublicUserInfo::OFFLINE;
constexpr GetPublicUserInfoResponse_PublicUserInfo_Status GetPublicUserInfoResponse_PublicUserInfo::ONLINE;
constexpr GetPublicUserInfoResponse_PublicUserInfo_Status GetPublicUserInfoResponse_PublicUserInfo::IN_GAME;
constexpr GetPublicUserInfoResponse_PublicUserInfo_Status GetPublicUserInfoResponse_PublicUserInfo::Status_MIN;
constexpr GetPublicUserInfoResponse_PublicUserInfo_Status GetPublicUserInfoResponse_PublicUserInfo::Status_MAX;
constexpr int GetPublicUserInfoResponse_PublicUserInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendUserResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_afterline_2fsystem_2eproto);
  return file_level_enum_descriptors_afterline_2fsystem_2eproto[1];
}
bool FriendUserResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FriendUserResponse_Status FriendUserResponse::PENDING;
constexpr FriendUserResponse_Status FriendUserResponse::BLOCKED;
constexpr FriendUserResponse_Status FriendUserResponse::ACCEPTED;
constexpr FriendUserResponse_Status FriendUserResponse::Status_MIN;
constexpr FriendUserResponse_Status FriendUserResponse::Status_MAX;
constexpr int FriendUserResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FederatedLoginRequest::_Internal {
 public:
};

FederatedLoginRequest::FederatedLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLoginRequest)
}
FederatedLoginRequest::FederatedLoginRequest(const FederatedLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remember_me_ = from.remember_me_;
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLoginRequest)
}

inline void FederatedLoginRequest::SharedCtor() {
remember_me_ = false;
}

FederatedLoginRequest::~FederatedLoginRequest() {
  // @@protoc_insertion_point(destructor:afterline.FederatedLoginRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FederatedLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FederatedLoginRequest::ArenaDtor(void* object) {
  FederatedLoginRequest* _this = reinterpret_cast< FederatedLoginRequest* >(object);
  (void)_this;
}
void FederatedLoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FederatedLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FederatedLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remember_me_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedLoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool remember_me = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          remember_me_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederatedLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FederatedLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool remember_me = 1;
  if (this->_internal_remember_me() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_remember_me(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FederatedLoginRequest)
  return target;
}

size_t FederatedLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FederatedLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool remember_me = 1;
  if (this->_internal_remember_me() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FederatedLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLoginRequest::GetClassData() const { return &_class_data_; }

void FederatedLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FederatedLoginRequest *>(to)->MergeFrom(
      static_cast<const FederatedLoginRequest &>(from));
}


void FederatedLoginRequest::MergeFrom(const FederatedLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FederatedLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remember_me() != 0) {
    _internal_set_remember_me(from._internal_remember_me());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederatedLoginRequest::CopyFrom(const FederatedLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FederatedLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedLoginRequest::IsInitialized() const {
  return true;
}

void FederatedLoginRequest::InternalSwap(FederatedLoginRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(remember_me_, other->remember_me_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedLoginRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[0]);
}

// ===================================================================

class FederatedLoginResponse::_Internal {
 public:
};

FederatedLoginResponse::FederatedLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLoginResponse)
}
FederatedLoginResponse::FederatedLoginResponse(const FederatedLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link().empty()) {
    link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLoginResponse)
}

inline void FederatedLoginResponse::SharedCtor() {
link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FederatedLoginResponse::~FederatedLoginResponse() {
  // @@protoc_insertion_point(destructor:afterline.FederatedLoginResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FederatedLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FederatedLoginResponse::ArenaDtor(void* object) {
  FederatedLoginResponse* _this = reinterpret_cast< FederatedLoginResponse* >(object);
  (void)_this;
}
void FederatedLoginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedLoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FederatedLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FederatedLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedLoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.FederatedLoginResponse.link"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederatedLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FederatedLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string link = 1;
  if (!this->_internal_link().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.FederatedLoginResponse.link");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FederatedLoginResponse)
  return target;
}

size_t FederatedLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FederatedLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link = 1;
  if (!this->_internal_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FederatedLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLoginResponse::GetClassData() const { return &_class_data_; }

void FederatedLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FederatedLoginResponse *>(to)->MergeFrom(
      static_cast<const FederatedLoginResponse &>(from));
}


void FederatedLoginResponse::MergeFrom(const FederatedLoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FederatedLoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_link().empty()) {
    _internal_set_link(from._internal_link());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederatedLoginResponse::CopyFrom(const FederatedLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FederatedLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedLoginResponse::IsInitialized() const {
  return true;
}

void FederatedLoginResponse::InternalSwap(FederatedLoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_, lhs_arena,
      &other->link_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedLoginResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[1]);
}

// ===================================================================

class FederatedLoginComplete::_Internal {
 public:
};

FederatedLoginComplete::FederatedLoginComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLoginComplete)
}
FederatedLoginComplete::FederatedLoginComplete(const FederatedLoginComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_email().empty()) {
    user_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_email(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  client_session_id_ = from.client_session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLoginComplete)
}

inline void FederatedLoginComplete::SharedCtor() {
user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_session_id_ = uint64_t{0u};
}

FederatedLoginComplete::~FederatedLoginComplete() {
  // @@protoc_insertion_point(destructor:afterline.FederatedLoginComplete)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FederatedLoginComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FederatedLoginComplete::ArenaDtor(void* object) {
  FederatedLoginComplete* _this = reinterpret_cast< FederatedLoginComplete* >(object);
  (void)_this;
}
void FederatedLoginComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedLoginComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FederatedLoginComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FederatedLoginComplete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_email_.ClearToEmpty();
  user_name_.ClearToEmpty();
  client_session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedLoginComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 client_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          client_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // string user_email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.FederatedLoginComplete.user_email"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.FederatedLoginComplete.user_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederatedLoginComplete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FederatedLoginComplete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_session_id(), target);
  }

  // string user_email = 2;
  if (!this->_internal_user_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_email().data(), static_cast<int>(this->_internal_user_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.FederatedLoginComplete.user_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_email(), target);
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.FederatedLoginComplete.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FederatedLoginComplete)
  return target;
}

size_t FederatedLoginComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FederatedLoginComplete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_email = 2;
  if (!this->_internal_user_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_email());
  }

  // string user_name = 3;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLoginComplete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FederatedLoginComplete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLoginComplete::GetClassData() const { return &_class_data_; }

void FederatedLoginComplete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FederatedLoginComplete *>(to)->MergeFrom(
      static_cast<const FederatedLoginComplete &>(from));
}


void FederatedLoginComplete::MergeFrom(const FederatedLoginComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FederatedLoginComplete)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_email().empty()) {
    _internal_set_user_email(from._internal_user_email());
  }
  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_client_session_id() != 0) {
    _internal_set_client_session_id(from._internal_client_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederatedLoginComplete::CopyFrom(const FederatedLoginComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FederatedLoginComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedLoginComplete::IsInitialized() const {
  return true;
}

void FederatedLoginComplete::InternalSwap(FederatedLoginComplete* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_email_, lhs_arena,
      &other->user_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  swap(client_session_id_, other->client_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedLoginComplete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[2]);
}

// ===================================================================

class FederatedLoginTimeout::_Internal {
 public:
};

FederatedLoginTimeout::FederatedLoginTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLoginTimeout)
}
FederatedLoginTimeout::FederatedLoginTimeout(const FederatedLoginTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLoginTimeout)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLoginTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLoginTimeout::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FederatedLoginTimeout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[3]);
}

// ===================================================================

class CancelFederatedLogin::_Internal {
 public:
};

CancelFederatedLogin::CancelFederatedLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:afterline.CancelFederatedLogin)
}
CancelFederatedLogin::CancelFederatedLogin(const CancelFederatedLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:afterline.CancelFederatedLogin)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelFederatedLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelFederatedLogin::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelFederatedLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[4]);
}

// ===================================================================

class FederatedLogOutRequest::_Internal {
 public:
};

FederatedLogOutRequest::FederatedLogOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLogOutRequest)
}
FederatedLogOutRequest::FederatedLogOutRequest(const FederatedLogOutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_session_id_ = from.client_session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLogOutRequest)
}

inline void FederatedLogOutRequest::SharedCtor() {
client_session_id_ = uint64_t{0u};
}

FederatedLogOutRequest::~FederatedLogOutRequest() {
  // @@protoc_insertion_point(destructor:afterline.FederatedLogOutRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FederatedLogOutRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FederatedLogOutRequest::ArenaDtor(void* object) {
  FederatedLogOutRequest* _this = reinterpret_cast< FederatedLogOutRequest* >(object);
  (void)_this;
}
void FederatedLogOutRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedLogOutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FederatedLogOutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FederatedLogOutRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedLogOutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 client_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          client_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederatedLogOutRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FederatedLogOutRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FederatedLogOutRequest)
  return target;
}

size_t FederatedLogOutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FederatedLogOutRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLogOutRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FederatedLogOutRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLogOutRequest::GetClassData() const { return &_class_data_; }

void FederatedLogOutRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FederatedLogOutRequest *>(to)->MergeFrom(
      static_cast<const FederatedLogOutRequest &>(from));
}


void FederatedLogOutRequest::MergeFrom(const FederatedLogOutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FederatedLogOutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_session_id() != 0) {
    _internal_set_client_session_id(from._internal_client_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederatedLogOutRequest::CopyFrom(const FederatedLogOutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FederatedLogOutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedLogOutRequest::IsInitialized() const {
  return true;
}

void FederatedLogOutRequest::InternalSwap(FederatedLogOutRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_session_id_, other->client_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedLogOutRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[5]);
}

// ===================================================================

class FederatedLogOutResponse::_Internal {
 public:
};

FederatedLogOutResponse::FederatedLogOutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FederatedLogOutResponse)
}
FederatedLogOutResponse::FederatedLogOutResponse(const FederatedLogOutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  succeeded_ = from.succeeded_;
  // @@protoc_insertion_point(copy_constructor:afterline.FederatedLogOutResponse)
}

inline void FederatedLogOutResponse::SharedCtor() {
succeeded_ = false;
}

FederatedLogOutResponse::~FederatedLogOutResponse() {
  // @@protoc_insertion_point(destructor:afterline.FederatedLogOutResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FederatedLogOutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FederatedLogOutResponse::ArenaDtor(void* object) {
  FederatedLogOutResponse* _this = reinterpret_cast< FederatedLogOutResponse* >(object);
  (void)_this;
}
void FederatedLogOutResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FederatedLogOutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FederatedLogOutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FederatedLogOutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succeeded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FederatedLogOutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool succeeded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FederatedLogOutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FederatedLogOutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeeded = 1;
  if (this->_internal_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succeeded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FederatedLogOutResponse)
  return target;
}

size_t FederatedLogOutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FederatedLogOutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool succeeded = 1;
  if (this->_internal_succeeded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FederatedLogOutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FederatedLogOutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FederatedLogOutResponse::GetClassData() const { return &_class_data_; }

void FederatedLogOutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FederatedLogOutResponse *>(to)->MergeFrom(
      static_cast<const FederatedLogOutResponse &>(from));
}


void FederatedLogOutResponse::MergeFrom(const FederatedLogOutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FederatedLogOutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_succeeded() != 0) {
    _internal_set_succeeded(from._internal_succeeded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FederatedLogOutResponse::CopyFrom(const FederatedLogOutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FederatedLogOutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FederatedLogOutResponse::IsInitialized() const {
  return true;
}

void FederatedLogOutResponse::InternalSwap(FederatedLogOutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(succeeded_, other->succeeded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FederatedLogOutResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[6]);
}

// ===================================================================

class ValidateSessionIdRequest::_Internal {
 public:
};

ValidateSessionIdRequest::ValidateSessionIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.ValidateSessionIdRequest)
}
ValidateSessionIdRequest::ValidateSessionIdRequest(const ValidateSessionIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_session_id_ = from.client_session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.ValidateSessionIdRequest)
}

inline void ValidateSessionIdRequest::SharedCtor() {
client_session_id_ = uint64_t{0u};
}

ValidateSessionIdRequest::~ValidateSessionIdRequest() {
  // @@protoc_insertion_point(destructor:afterline.ValidateSessionIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateSessionIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidateSessionIdRequest::ArenaDtor(void* object) {
  ValidateSessionIdRequest* _this = reinterpret_cast< ValidateSessionIdRequest* >(object);
  (void)_this;
}
void ValidateSessionIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateSessionIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateSessionIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.ValidateSessionIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateSessionIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 client_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          client_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateSessionIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.ValidateSessionIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.ValidateSessionIdRequest)
  return target;
}

size_t ValidateSessionIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.ValidateSessionIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 client_session_id = 1;
  if (this->_internal_client_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateSessionIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateSessionIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateSessionIdRequest::GetClassData() const { return &_class_data_; }

void ValidateSessionIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateSessionIdRequest *>(to)->MergeFrom(
      static_cast<const ValidateSessionIdRequest &>(from));
}


void ValidateSessionIdRequest::MergeFrom(const ValidateSessionIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.ValidateSessionIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_session_id() != 0) {
    _internal_set_client_session_id(from._internal_client_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateSessionIdRequest::CopyFrom(const ValidateSessionIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.ValidateSessionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateSessionIdRequest::IsInitialized() const {
  return true;
}

void ValidateSessionIdRequest::InternalSwap(ValidateSessionIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(client_session_id_, other->client_session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateSessionIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[7]);
}

// ===================================================================

class ValidateSessionIdResponse::_Internal {
 public:
};

ValidateSessionIdResponse::ValidateSessionIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.ValidateSessionIdResponse)
}
ValidateSessionIdResponse::ValidateSessionIdResponse(const ValidateSessionIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:afterline.ValidateSessionIdResponse)
}

inline void ValidateSessionIdResponse::SharedCtor() {
valid_ = false;
}

ValidateSessionIdResponse::~ValidateSessionIdResponse() {
  // @@protoc_insertion_point(destructor:afterline.ValidateSessionIdResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateSessionIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidateSessionIdResponse::ArenaDtor(void* object) {
  ValidateSessionIdResponse* _this = reinterpret_cast< ValidateSessionIdResponse* >(object);
  (void)_this;
}
void ValidateSessionIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateSessionIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateSessionIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.ValidateSessionIdResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateSessionIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateSessionIdResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.ValidateSessionIdResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.ValidateSessionIdResponse)
  return target;
}

size_t ValidateSessionIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.ValidateSessionIdResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateSessionIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateSessionIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateSessionIdResponse::GetClassData() const { return &_class_data_; }

void ValidateSessionIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ValidateSessionIdResponse *>(to)->MergeFrom(
      static_cast<const ValidateSessionIdResponse &>(from));
}


void ValidateSessionIdResponse::MergeFrom(const ValidateSessionIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.ValidateSessionIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateSessionIdResponse::CopyFrom(const ValidateSessionIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.ValidateSessionIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateSessionIdResponse::IsInitialized() const {
  return true;
}

void ValidateSessionIdResponse::InternalSwap(ValidateSessionIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateSessionIdResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[8]);
}

// ===================================================================

class Disconnect::_Internal {
 public:
};

Disconnect::Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.Disconnect)
}
Disconnect::Disconnect(const Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.Disconnect)
}

inline void Disconnect::SharedCtor() {
session_id_ = uint64_t{0u};
}

Disconnect::~Disconnect() {
  // @@protoc_insertion_point(destructor:afterline.Disconnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Disconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Disconnect::ArenaDtor(void* object) {
  Disconnect* _this = reinterpret_cast< Disconnect* >(object);
  (void)_this;
}
void Disconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Disconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.Disconnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Disconnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.Disconnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.Disconnect)
  return target;
}

size_t Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.Disconnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disconnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Disconnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disconnect::GetClassData() const { return &_class_data_; }

void Disconnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Disconnect *>(to)->MergeFrom(
      static_cast<const Disconnect &>(from));
}


void Disconnect::MergeFrom(const Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disconnect::CopyFrom(const Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disconnect::IsInitialized() const {
  return true;
}

void Disconnect::InternalSwap(Disconnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Disconnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[9]);
}

// ===================================================================

class Connect::_Internal {
 public:
  using HasBits = decltype(std::declval<Connect>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Connect::Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.Connect)
}
Connect::Connect(const Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.Connect)
}

inline void Connect::SharedCtor() {
session_id_ = uint64_t{0u};
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:afterline.Connect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Connect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Connect::ArenaDtor(void* object) {
  Connect* _this = reinterpret_cast< Connect* >(object);
  (void)_this;
}
void Connect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.Connect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.Connect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  if (_internal_has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.Connect)
  return target;
}

size_t Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.Connect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 session_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Connect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connect::GetClassData() const { return &_class_data_; }

void Connect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Connect *>(to)->MergeFrom(
      static_cast<const Connect &>(from));
}


void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session_id()) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {
  return true;
}

void Connect::InternalSwap(Connect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[10]);
}

// ===================================================================

class GetUserStatusRequest::_Internal {
 public:
};

GetUserStatusRequest::GetUserStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetUserStatusRequest)
}
GetUserStatusRequest::GetUserStatusRequest(const GetUserStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:afterline.GetUserStatusRequest)
}

inline void GetUserStatusRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(available_));
}

GetUserStatusRequest::~GetUserStatusRequest() {
  // @@protoc_insertion_point(destructor:afterline.GetUserStatusRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetUserStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserStatusRequest::ArenaDtor(void* object) {
  GetUserStatusRequest* _this = reinterpret_cast< GetUserStatusRequest* >(object);
  (void)_this;
}
void GetUserStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUserStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetUserStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bool available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetUserStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  // bool available = 3;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetUserStatusRequest)
  return target;
}

size_t GetUserStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetUserStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  // bool available = 3;
  if (this->_internal_available() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetUserStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserStatusRequest::GetClassData() const { return &_class_data_; }

void GetUserStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetUserStatusRequest *>(to)->MergeFrom(
      static_cast<const GetUserStatusRequest &>(from));
}


void GetUserStatusRequest::MergeFrom(const GetUserStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetUserStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_available() != 0) {
    _internal_set_available(from._internal_available());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserStatusRequest::CopyFrom(const GetUserStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetUserStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStatusRequest::IsInitialized() const {
  return true;
}

void GetUserStatusRequest::InternalSwap(GetUserStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserStatusRequest, available_)
      + sizeof(GetUserStatusRequest::available_)
      - PROTOBUF_FIELD_OFFSET(GetUserStatusRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserStatusRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[11]);
}

// ===================================================================

class GetPublicUserInfoRequest::_Internal {
 public:
};

GetPublicUserInfoRequest::GetPublicUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetPublicUserInfoRequest)
}
GetPublicUserInfoRequest::GetPublicUserInfoRequest(const GetPublicUserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.GetPublicUserInfoRequest)
}

inline void GetPublicUserInfoRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
}

GetPublicUserInfoRequest::~GetPublicUserInfoRequest() {
  // @@protoc_insertion_point(destructor:afterline.GetPublicUserInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPublicUserInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPublicUserInfoRequest::ArenaDtor(void* object) {
  GetPublicUserInfoRequest* _this = reinterpret_cast< GetPublicUserInfoRequest* >(object);
  (void)_this;
}
void GetPublicUserInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicUserInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPublicUserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetPublicUserInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPublicUserInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPublicUserInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetPublicUserInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetPublicUserInfoRequest)
  return target;
}

size_t GetPublicUserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetPublicUserInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPublicUserInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPublicUserInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPublicUserInfoRequest::GetClassData() const { return &_class_data_; }

void GetPublicUserInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPublicUserInfoRequest *>(to)->MergeFrom(
      static_cast<const GetPublicUserInfoRequest &>(from));
}


void GetPublicUserInfoRequest::MergeFrom(const GetPublicUserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetPublicUserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPublicUserInfoRequest::CopyFrom(const GetPublicUserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetPublicUserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicUserInfoRequest::IsInitialized() const {
  return true;
}

void GetPublicUserInfoRequest::InternalSwap(GetPublicUserInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPublicUserInfoRequest, user_id_)
      + sizeof(GetPublicUserInfoRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetPublicUserInfoRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPublicUserInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[12]);
}

// ===================================================================

class GetPublicUserInfoResponse_PublicUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPublicUserInfoResponse_PublicUserInfo>()._has_bits_);
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_status_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::afterline::IconSetInfo& icon_set(const GetPublicUserInfoResponse_PublicUserInfo* msg);
  static void set_has_icon_set(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::afterline::IconSetInfo&
GetPublicUserInfoResponse_PublicUserInfo::_Internal::icon_set(const GetPublicUserInfoResponse_PublicUserInfo* msg) {
  return *msg->icon_set_;
}
void GetPublicUserInfoResponse_PublicUserInfo::clear_icon_set() {
  if (icon_set_ != nullptr) icon_set_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GetPublicUserInfoResponse_PublicUserInfo::GetPublicUserInfoResponse_PublicUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  public_games_joined_(arena),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetPublicUserInfoResponse.PublicUserInfo)
}
GetPublicUserInfoResponse_PublicUserInfo::GetPublicUserInfoResponse_PublicUserInfo(const GetPublicUserInfoResponse_PublicUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      public_games_joined_(from.public_games_joined_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  user_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_desc()) {
    user_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_desc(), 
      GetArenaForAllocation());
  }
  user_status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_status_msg()) {
    user_status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_status_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_icon_set()) {
    icon_set_ = new ::afterline::IconSetInfo(*from.icon_set_);
  } else {
    icon_set_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:afterline.GetPublicUserInfoResponse.PublicUserInfo)
}

inline void GetPublicUserInfoResponse_PublicUserInfo::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_status_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&icon_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&icon_set_)) + sizeof(status_));
}

GetPublicUserInfoResponse_PublicUserInfo::~GetPublicUserInfoResponse_PublicUserInfo() {
  // @@protoc_insertion_point(destructor:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPublicUserInfoResponse_PublicUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_status_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete icon_set_;
}

void GetPublicUserInfoResponse_PublicUserInfo::ArenaDtor(void* object) {
  GetPublicUserInfoResponse_PublicUserInfo* _this = reinterpret_cast< GetPublicUserInfoResponse_PublicUserInfo* >(object);
  (void)_this;
}
void GetPublicUserInfoResponse_PublicUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicUserInfoResponse_PublicUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPublicUserInfoResponse_PublicUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_games_joined_.Clear();
  friends_.Clear();
  username_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      display_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_status_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(icon_set_ != nullptr);
      icon_set_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPublicUserInfoResponse_PublicUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.GetPublicUserInfoResponse.PublicUserInfo.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.GetPublicUserInfoResponse.PublicUserInfo.display_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.GetPublicUserInfoResponse.PublicUserInfo.user_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_status_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_status_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.GetPublicUserInfoResponse.PublicUserInfo.user_status_msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .afterline.GetPublicUserInfoResponse.PublicUserInfo.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::afterline::GetPublicUserInfoResponse_PublicUserInfo_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .afterline.IconSetInfo icon_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_icon_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 public_games_joined = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_public_games_joined(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_public_games_joined(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 friends = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_friends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_friends(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPublicUserInfoResponse_PublicUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.GetPublicUserInfoResponse.PublicUserInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // optional string display_name = 2;
  if (_internal_has_display_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.GetPublicUserInfoResponse.PublicUserInfo.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // optional string user_desc = 3;
  if (_internal_has_user_desc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_desc().data(), static_cast<int>(this->_internal_user_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.GetPublicUserInfoResponse.PublicUserInfo.user_desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_desc(), target);
  }

  // optional string user_status_msg = 4;
  if (_internal_has_user_status_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_status_msg().data(), static_cast<int>(this->_internal_user_status_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.GetPublicUserInfoResponse.PublicUserInfo.user_status_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_status_msg(), target);
  }

  // .afterline.GetPublicUserInfoResponse.PublicUserInfo.Status status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // optional .afterline.IconSetInfo icon_set = 6;
  if (_internal_has_icon_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::icon_set(this), target, stream);
  }

  // repeated fixed64 public_games_joined = 7;
  if (this->_internal_public_games_joined_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_public_games_joined(), target);
  }

  // repeated fixed64 friends = 8;
  if (this->_internal_friends_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_friends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  return target;
}

size_t GetPublicUserInfoResponse_PublicUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 public_games_joined = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_public_games_joined_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 friends = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_friends_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string display_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional string user_desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_desc());
    }

    // optional string user_status_msg = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_status_msg());
    }

    // optional .afterline.IconSetInfo icon_set = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *icon_set_);
    }

  }
  // .afterline.GetPublicUserInfoResponse.PublicUserInfo.Status status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPublicUserInfoResponse_PublicUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPublicUserInfoResponse_PublicUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPublicUserInfoResponse_PublicUserInfo::GetClassData() const { return &_class_data_; }

void GetPublicUserInfoResponse_PublicUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPublicUserInfoResponse_PublicUserInfo *>(to)->MergeFrom(
      static_cast<const GetPublicUserInfoResponse_PublicUserInfo &>(from));
}


void GetPublicUserInfoResponse_PublicUserInfo::MergeFrom(const GetPublicUserInfoResponse_PublicUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  public_games_joined_.MergeFrom(from.public_games_joined_);
  friends_.MergeFrom(from.friends_);
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_desc(from._internal_user_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_status_msg(from._internal_user_status_msg());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_icon_set()->::afterline::IconSetInfo::MergeFrom(from._internal_icon_set());
    }
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPublicUserInfoResponse_PublicUserInfo::CopyFrom(const GetPublicUserInfoResponse_PublicUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetPublicUserInfoResponse.PublicUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicUserInfoResponse_PublicUserInfo::IsInitialized() const {
  return true;
}

void GetPublicUserInfoResponse_PublicUserInfo::InternalSwap(GetPublicUserInfoResponse_PublicUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_games_joined_.InternalSwap(&other->public_games_joined_);
  friends_.InternalSwap(&other->friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_desc_, lhs_arena,
      &other->user_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_status_msg_, lhs_arena,
      &other->user_status_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPublicUserInfoResponse_PublicUserInfo, status_)
      + sizeof(GetPublicUserInfoResponse_PublicUserInfo::status_)
      - PROTOBUF_FIELD_OFFSET(GetPublicUserInfoResponse_PublicUserInfo, icon_set_)>(
          reinterpret_cast<char*>(&icon_set_),
          reinterpret_cast<char*>(&other->icon_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPublicUserInfoResponse_PublicUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[13]);
}

// ===================================================================

class GetPublicUserInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPublicUserInfoResponse>()._has_bits_);
  static const ::afterline::GetPublicUserInfoResponse_PublicUserInfo& user_info(const GetPublicUserInfoResponse* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::afterline::GetPublicUserInfoResponse_PublicUserInfo&
GetPublicUserInfoResponse::_Internal::user_info(const GetPublicUserInfoResponse* msg) {
  return *msg->user_info_;
}
GetPublicUserInfoResponse::GetPublicUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetPublicUserInfoResponse)
}
GetPublicUserInfoResponse::GetPublicUserInfoResponse(const GetPublicUserInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::afterline::GetPublicUserInfoResponse_PublicUserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.GetPublicUserInfoResponse)
}

inline void GetPublicUserInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(user_id_));
}

GetPublicUserInfoResponse::~GetPublicUserInfoResponse() {
  // @@protoc_insertion_point(destructor:afterline.GetPublicUserInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPublicUserInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
}

void GetPublicUserInfoResponse::ArenaDtor(void* object) {
  GetPublicUserInfoResponse* _this = reinterpret_cast< GetPublicUserInfoResponse* >(object);
  (void)_this;
}
void GetPublicUserInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPublicUserInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPublicUserInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetPublicUserInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_info_ != nullptr);
    user_info_->Clear();
  }
  user_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPublicUserInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .afterline.GetPublicUserInfoResponse.PublicUserInfo user_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPublicUserInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetPublicUserInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_user_id(), target);
  }

  // optional .afterline.GetPublicUserInfoResponse.PublicUserInfo user_info = 2;
  if (_internal_has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetPublicUserInfoResponse)
  return target;
}

size_t GetPublicUserInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetPublicUserInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .afterline.GetPublicUserInfoResponse.PublicUserInfo user_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPublicUserInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPublicUserInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPublicUserInfoResponse::GetClassData() const { return &_class_data_; }

void GetPublicUserInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPublicUserInfoResponse *>(to)->MergeFrom(
      static_cast<const GetPublicUserInfoResponse &>(from));
}


void GetPublicUserInfoResponse::MergeFrom(const GetPublicUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetPublicUserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::afterline::GetPublicUserInfoResponse_PublicUserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPublicUserInfoResponse::CopyFrom(const GetPublicUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetPublicUserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPublicUserInfoResponse::IsInitialized() const {
  return true;
}

void GetPublicUserInfoResponse::InternalSwap(GetPublicUserInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPublicUserInfoResponse, user_id_)
      + sizeof(GetPublicUserInfoResponse::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetPublicUserInfoResponse, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPublicUserInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[14]);
}

// ===================================================================

class GetUserIDRequest::_Internal {
 public:
};

GetUserIDRequest::GetUserIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetUserIDRequest)
}
GetUserIDRequest::GetUserIDRequest(const GetUserIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.GetUserIDRequest)
}

inline void GetUserIDRequest::SharedCtor() {
session_id_ = uint64_t{0u};
}

GetUserIDRequest::~GetUserIDRequest() {
  // @@protoc_insertion_point(destructor:afterline.GetUserIDRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetUserIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserIDRequest::ArenaDtor(void* object) {
  GetUserIDRequest* _this = reinterpret_cast< GetUserIDRequest* >(object);
  (void)_this;
}
void GetUserIDRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUserIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetUserIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetUserIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetUserIDRequest)
  return target;
}

size_t GetUserIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetUserIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetUserIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserIDRequest::GetClassData() const { return &_class_data_; }

void GetUserIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetUserIDRequest *>(to)->MergeFrom(
      static_cast<const GetUserIDRequest &>(from));
}


void GetUserIDRequest::MergeFrom(const GetUserIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetUserIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserIDRequest::CopyFrom(const GetUserIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetUserIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDRequest::IsInitialized() const {
  return true;
}

void GetUserIDRequest::InternalSwap(GetUserIDRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIDRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[15]);
}

// ===================================================================

class GetUserIDResponse::_Internal {
 public:
};

GetUserIDResponse::GetUserIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.GetUserIDResponse)
}
GetUserIDResponse::GetUserIDResponse(const GetUserIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.GetUserIDResponse)
}

inline void GetUserIDResponse::SharedCtor() {
user_id_ = uint64_t{0u};
}

GetUserIDResponse::~GetUserIDResponse() {
  // @@protoc_insertion_point(destructor:afterline.GetUserIDResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetUserIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetUserIDResponse::ArenaDtor(void* object) {
  GetUserIDResponse* _this = reinterpret_cast< GetUserIDResponse* >(object);
  (void)_this;
}
void GetUserIDResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUserIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.GetUserIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUserIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.GetUserIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.GetUserIDResponse)
  return target;
}

size_t GetUserIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.GetUserIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetUserIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserIDResponse::GetClassData() const { return &_class_data_; }

void GetUserIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetUserIDResponse *>(to)->MergeFrom(
      static_cast<const GetUserIDResponse &>(from));
}


void GetUserIDResponse::MergeFrom(const GetUserIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.GetUserIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserIDResponse::CopyFrom(const GetUserIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.GetUserIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDResponse::IsInitialized() const {
  return true;
}

void GetUserIDResponse::InternalSwap(GetUserIDResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserIDResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[16]);
}

// ===================================================================

class FindUserRequest::_Internal {
 public:
};

FindUserRequest::FindUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FindUserRequest)
}
FindUserRequest::FindUserRequest(const FindUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_search_term().empty()) {
    search_term_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_term(), 
      GetArenaForAllocation());
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:afterline.FindUserRequest)
}

inline void FindUserRequest::SharedCtor() {
search_term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_id_ = uint64_t{0u};
}

FindUserRequest::~FindUserRequest() {
  // @@protoc_insertion_point(destructor:afterline.FindUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_term_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindUserRequest::ArenaDtor(void* object) {
  FindUserRequest* _this = reinterpret_cast< FindUserRequest* >(object);
  (void)_this;
}
void FindUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FindUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_term_.ClearToEmpty();
  session_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // string search_term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_term();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "afterline.FindUserRequest.search_term"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FindUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // string search_term = 2;
  if (!this->_internal_search_term().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_term().data(), static_cast<int>(this->_internal_search_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "afterline.FindUserRequest.search_term");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FindUserRequest)
  return target;
}

size_t FindUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FindUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string search_term = 2;
  if (!this->_internal_search_term().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_term());
  }

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindUserRequest::GetClassData() const { return &_class_data_; }

void FindUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindUserRequest *>(to)->MergeFrom(
      static_cast<const FindUserRequest &>(from));
}


void FindUserRequest::MergeFrom(const FindUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FindUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search_term().empty()) {
    _internal_set_search_term(from._internal_search_term());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindUserRequest::CopyFrom(const FindUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FindUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindUserRequest::IsInitialized() const {
  return true;
}

void FindUserRequest::InternalSwap(FindUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_term_, lhs_arena,
      &other->search_term_, rhs_arena
  );
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[17]);
}

// ===================================================================

class FindUserResponse::_Internal {
 public:
};

FindUserResponse::FindUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FindUserResponse)
}
FindUserResponse::FindUserResponse(const FindUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:afterline.FindUserResponse)
}

inline void FindUserResponse::SharedCtor() {
}

FindUserResponse::~FindUserResponse() {
  // @@protoc_insertion_point(destructor:afterline.FindUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindUserResponse::ArenaDtor(void* object) {
  FindUserResponse* _this = reinterpret_cast< FindUserResponse* >(object);
  (void)_this;
}
void FindUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FindUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_users(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_users(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FindUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 users = 1;
  if (this->_internal_users_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_users(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FindUserResponse)
  return target;
}

size_t FindUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FindUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_users_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindUserResponse::GetClassData() const { return &_class_data_; }

void FindUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindUserResponse *>(to)->MergeFrom(
      static_cast<const FindUserResponse &>(from));
}


void FindUserResponse::MergeFrom(const FindUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FindUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindUserResponse::CopyFrom(const FindUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FindUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindUserResponse::IsInitialized() const {
  return true;
}

void FindUserResponse::InternalSwap(FindUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[18]);
}

// ===================================================================

class BlockUserRequest::_Internal {
 public:
};

BlockUserRequest::BlockUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.BlockUserRequest)
}
BlockUserRequest::BlockUserRequest(const BlockUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(block_));
  // @@protoc_insertion_point(copy_constructor:afterline.BlockUserRequest)
}

inline void BlockUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(block_));
}

BlockUserRequest::~BlockUserRequest() {
  // @@protoc_insertion_point(destructor:afterline.BlockUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockUserRequest::ArenaDtor(void* object) {
  BlockUserRequest* _this = reinterpret_cast< BlockUserRequest* >(object);
  (void)_this;
}
void BlockUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.BlockUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bool block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.BlockUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  // bool block = 3;
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.BlockUserRequest)
  return target;
}

size_t BlockUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.BlockUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  // bool block = 3;
  if (this->_internal_block() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockUserRequest::GetClassData() const { return &_class_data_; }

void BlockUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockUserRequest *>(to)->MergeFrom(
      static_cast<const BlockUserRequest &>(from));
}


void BlockUserRequest::MergeFrom(const BlockUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.BlockUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_block() != 0) {
    _internal_set_block(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockUserRequest::CopyFrom(const BlockUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.BlockUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUserRequest::IsInitialized() const {
  return true;
}

void BlockUserRequest::InternalSwap(BlockUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockUserRequest, block_)
      + sizeof(BlockUserRequest::block_)
      - PROTOBUF_FIELD_OFFSET(BlockUserRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[19]);
}

// ===================================================================

class BlockUserResponse::_Internal {
 public:
};

BlockUserResponse::BlockUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.BlockUserResponse)
}
BlockUserResponse::BlockUserResponse(const BlockUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&successful_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(successful_));
  // @@protoc_insertion_point(copy_constructor:afterline.BlockUserResponse)
}

inline void BlockUserResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&successful_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(successful_));
}

BlockUserResponse::~BlockUserResponse() {
  // @@protoc_insertion_point(destructor:afterline.BlockUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockUserResponse::ArenaDtor(void* object) {
  BlockUserResponse* _this = reinterpret_cast< BlockUserResponse* >(object);
  (void)_this;
}
void BlockUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.BlockUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successful_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(successful_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bool successful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.BlockUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  // bool successful = 3;
  if (this->_internal_successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_successful(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.BlockUserResponse)
  return target;
}

size_t BlockUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.BlockUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  // bool successful = 3;
  if (this->_internal_successful() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockUserResponse::GetClassData() const { return &_class_data_; }

void BlockUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockUserResponse *>(to)->MergeFrom(
      static_cast<const BlockUserResponse &>(from));
}


void BlockUserResponse::MergeFrom(const BlockUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.BlockUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockUserResponse::CopyFrom(const BlockUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.BlockUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUserResponse::IsInitialized() const {
  return true;
}

void BlockUserResponse::InternalSwap(BlockUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockUserResponse, successful_)
      + sizeof(BlockUserResponse::successful_)
      - PROTOBUF_FIELD_OFFSET(BlockUserResponse, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[20]);
}

// ===================================================================

class FriendUserRequest::_Internal {
 public:
};

FriendUserRequest::FriendUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FriendUserRequest)
}
FriendUserRequest::FriendUserRequest(const FriendUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.FriendUserRequest)
}

inline void FriendUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
}

FriendUserRequest::~FriendUserRequest() {
  // @@protoc_insertion_point(destructor:afterline.FriendUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FriendUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendUserRequest::ArenaDtor(void* object) {
  FriendUserRequest* _this = reinterpret_cast< FriendUserRequest* >(object);
  (void)_this;
}
void FriendUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FriendUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FriendUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FriendUserRequest)
  return target;
}

size_t FriendUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FriendUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendUserRequest::GetClassData() const { return &_class_data_; }

void FriendUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendUserRequest *>(to)->MergeFrom(
      static_cast<const FriendUserRequest &>(from));
}


void FriendUserRequest::MergeFrom(const FriendUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FriendUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendUserRequest::CopyFrom(const FriendUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FriendUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendUserRequest::IsInitialized() const {
  return true;
}

void FriendUserRequest::InternalSwap(FriendUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendUserRequest, user_id_)
      + sizeof(FriendUserRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendUserRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[21]);
}

// ===================================================================

class FriendUserResponse::_Internal {
 public:
};

FriendUserResponse::FriendUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.FriendUserResponse)
}
FriendUserResponse::FriendUserResponse(const FriendUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.FriendUserResponse)
}

inline void FriendUserResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
}

FriendUserResponse::~FriendUserResponse() {
  // @@protoc_insertion_point(destructor:afterline.FriendUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FriendUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendUserResponse::ArenaDtor(void* object) {
  FriendUserResponse* _this = reinterpret_cast< FriendUserResponse* >(object);
  (void)_this;
}
void FriendUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.FriendUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.FriendUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.FriendUserResponse)
  return target;
}

size_t FriendUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.FriendUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendUserResponse::GetClassData() const { return &_class_data_; }

void FriendUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendUserResponse *>(to)->MergeFrom(
      static_cast<const FriendUserResponse &>(from));
}


void FriendUserResponse::MergeFrom(const FriendUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.FriendUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendUserResponse::CopyFrom(const FriendUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.FriendUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendUserResponse::IsInitialized() const {
  return true;
}

void FriendUserResponse::InternalSwap(FriendUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendUserResponse, user_id_)
      + sizeof(FriendUserResponse::user_id_)
      - PROTOBUF_FIELD_OFFSET(FriendUserResponse, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[22]);
}

// ===================================================================

class UnFriendUserRequest::_Internal {
 public:
};

UnFriendUserRequest::UnFriendUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.UnFriendUserRequest)
}
UnFriendUserRequest::UnFriendUserRequest(const UnFriendUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:afterline.UnFriendUserRequest)
}

inline void UnFriendUserRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&session_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
}

UnFriendUserRequest::~UnFriendUserRequest() {
  // @@protoc_insertion_point(destructor:afterline.UnFriendUserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnFriendUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnFriendUserRequest::ArenaDtor(void* object) {
  UnFriendUserRequest* _this = reinterpret_cast< UnFriendUserRequest* >(object);
  (void)_this;
}
void UnFriendUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnFriendUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnFriendUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.UnFriendUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnFriendUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnFriendUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.UnFriendUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_session_id(), target);
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.UnFriendUserRequest)
  return target;
}

size_t UnFriendUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.UnFriendUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnFriendUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnFriendUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnFriendUserRequest::GetClassData() const { return &_class_data_; }

void UnFriendUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnFriendUserRequest *>(to)->MergeFrom(
      static_cast<const UnFriendUserRequest &>(from));
}


void UnFriendUserRequest::MergeFrom(const UnFriendUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.UnFriendUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnFriendUserRequest::CopyFrom(const UnFriendUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.UnFriendUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnFriendUserRequest::IsInitialized() const {
  return true;
}

void UnFriendUserRequest::InternalSwap(UnFriendUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnFriendUserRequest, user_id_)
      + sizeof(UnFriendUserRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(UnFriendUserRequest, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnFriendUserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[23]);
}

// ===================================================================

class UnFriendUserResponse::_Internal {
 public:
};

UnFriendUserResponse::UnFriendUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:afterline.UnFriendUserResponse)
}
UnFriendUserResponse::UnFriendUserResponse(const UnFriendUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&successful_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(successful_));
  // @@protoc_insertion_point(copy_constructor:afterline.UnFriendUserResponse)
}

inline void UnFriendUserResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&successful_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(successful_));
}

UnFriendUserResponse::~UnFriendUserResponse() {
  // @@protoc_insertion_point(destructor:afterline.UnFriendUserResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnFriendUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnFriendUserResponse::ArenaDtor(void* object) {
  UnFriendUserResponse* _this = reinterpret_cast< UnFriendUserResponse* >(object);
  (void)_this;
}
void UnFriendUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnFriendUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnFriendUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afterline.UnFriendUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successful_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(successful_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnFriendUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bool successful = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnFriendUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afterline.UnFriendUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_user_id(), target);
  }

  // bool successful = 2;
  if (this->_internal_successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_successful(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afterline.UnFriendUserResponse)
  return target;
}

size_t UnFriendUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afterline.UnFriendUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += 1 + 8;
  }

  // bool successful = 2;
  if (this->_internal_successful() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnFriendUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnFriendUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnFriendUserResponse::GetClassData() const { return &_class_data_; }

void UnFriendUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnFriendUserResponse *>(to)->MergeFrom(
      static_cast<const UnFriendUserResponse &>(from));
}


void UnFriendUserResponse::MergeFrom(const UnFriendUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afterline.UnFriendUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_successful() != 0) {
    _internal_set_successful(from._internal_successful());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnFriendUserResponse::CopyFrom(const UnFriendUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afterline.UnFriendUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnFriendUserResponse::IsInitialized() const {
  return true;
}

void UnFriendUserResponse::InternalSwap(UnFriendUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnFriendUserResponse, successful_)
      + sizeof(UnFriendUserResponse::successful_)
      - PROTOBUF_FIELD_OFFSET(UnFriendUserResponse, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnFriendUserResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_afterline_2fsystem_2eproto_getter, &descriptor_table_afterline_2fsystem_2eproto_once,
      file_level_metadata_afterline_2fsystem_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace afterline
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::afterline::FederatedLoginRequest* Arena::CreateMaybeMessage< ::afterline::FederatedLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FederatedLoginResponse* Arena::CreateMaybeMessage< ::afterline::FederatedLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FederatedLoginComplete* Arena::CreateMaybeMessage< ::afterline::FederatedLoginComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLoginComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FederatedLoginTimeout* Arena::CreateMaybeMessage< ::afterline::FederatedLoginTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLoginTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::CancelFederatedLogin* Arena::CreateMaybeMessage< ::afterline::CancelFederatedLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::CancelFederatedLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FederatedLogOutRequest* Arena::CreateMaybeMessage< ::afterline::FederatedLogOutRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLogOutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FederatedLogOutResponse* Arena::CreateMaybeMessage< ::afterline::FederatedLogOutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FederatedLogOutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::ValidateSessionIdRequest* Arena::CreateMaybeMessage< ::afterline::ValidateSessionIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::ValidateSessionIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::ValidateSessionIdResponse* Arena::CreateMaybeMessage< ::afterline::ValidateSessionIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::ValidateSessionIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::Disconnect* Arena::CreateMaybeMessage< ::afterline::Disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::Connect* Arena::CreateMaybeMessage< ::afterline::Connect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetUserStatusRequest* Arena::CreateMaybeMessage< ::afterline::GetUserStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetUserStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetPublicUserInfoRequest* Arena::CreateMaybeMessage< ::afterline::GetPublicUserInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetPublicUserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetPublicUserInfoResponse_PublicUserInfo* Arena::CreateMaybeMessage< ::afterline::GetPublicUserInfoResponse_PublicUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetPublicUserInfoResponse_PublicUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetPublicUserInfoResponse* Arena::CreateMaybeMessage< ::afterline::GetPublicUserInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetPublicUserInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetUserIDRequest* Arena::CreateMaybeMessage< ::afterline::GetUserIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetUserIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::GetUserIDResponse* Arena::CreateMaybeMessage< ::afterline::GetUserIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::GetUserIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FindUserRequest* Arena::CreateMaybeMessage< ::afterline::FindUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FindUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FindUserResponse* Arena::CreateMaybeMessage< ::afterline::FindUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FindUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::BlockUserRequest* Arena::CreateMaybeMessage< ::afterline::BlockUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::BlockUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::BlockUserResponse* Arena::CreateMaybeMessage< ::afterline::BlockUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::BlockUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FriendUserRequest* Arena::CreateMaybeMessage< ::afterline::FriendUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FriendUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::FriendUserResponse* Arena::CreateMaybeMessage< ::afterline::FriendUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::FriendUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::UnFriendUserRequest* Arena::CreateMaybeMessage< ::afterline::UnFriendUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::UnFriendUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afterline::UnFriendUserResponse* Arena::CreateMaybeMessage< ::afterline::UnFriendUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afterline::UnFriendUserResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
