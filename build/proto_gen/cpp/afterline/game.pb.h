// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afterline/game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_afterline_2fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_afterline_2fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "afterline/asset.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_afterline_2fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_afterline_2fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_afterline_2fgame_2eproto;
namespace afterline {
class GameInfoRequest;
struct GameInfoRequestDefaultTypeInternal;
extern GameInfoRequestDefaultTypeInternal _GameInfoRequest_default_instance_;
class GameInfoResponse;
struct GameInfoResponseDefaultTypeInternal;
extern GameInfoResponseDefaultTypeInternal _GameInfoResponse_default_instance_;
class GameListRequest;
struct GameListRequestDefaultTypeInternal;
extern GameListRequestDefaultTypeInternal _GameListRequest_default_instance_;
class GameListResponse;
struct GameListResponseDefaultTypeInternal;
extern GameListResponseDefaultTypeInternal _GameListResponse_default_instance_;
class JoinGameRequest;
struct JoinGameRequestDefaultTypeInternal;
extern JoinGameRequestDefaultTypeInternal _JoinGameRequest_default_instance_;
class JoinGameResponse;
struct JoinGameResponseDefaultTypeInternal;
extern JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
}  // namespace afterline
PROTOBUF_NAMESPACE_OPEN
template<> ::afterline::GameInfoRequest* Arena::CreateMaybeMessage<::afterline::GameInfoRequest>(Arena*);
template<> ::afterline::GameInfoResponse* Arena::CreateMaybeMessage<::afterline::GameInfoResponse>(Arena*);
template<> ::afterline::GameListRequest* Arena::CreateMaybeMessage<::afterline::GameListRequest>(Arena*);
template<> ::afterline::GameListResponse* Arena::CreateMaybeMessage<::afterline::GameListResponse>(Arena*);
template<> ::afterline::JoinGameRequest* Arena::CreateMaybeMessage<::afterline::JoinGameRequest>(Arena*);
template<> ::afterline::JoinGameResponse* Arena::CreateMaybeMessage<::afterline::JoinGameResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace afterline {

enum JoinGameResponse_Status : int {
  JoinGameResponse_Status_DISALLOWED = 0,
  JoinGameResponse_Status_PENDING = 1,
  JoinGameResponse_Status_JOINED = 2,
  JoinGameResponse_Status_JoinGameResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JoinGameResponse_Status_JoinGameResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JoinGameResponse_Status_IsValid(int value);
constexpr JoinGameResponse_Status JoinGameResponse_Status_Status_MIN = JoinGameResponse_Status_DISALLOWED;
constexpr JoinGameResponse_Status JoinGameResponse_Status_Status_MAX = JoinGameResponse_Status_JOINED;
constexpr int JoinGameResponse_Status_Status_ARRAYSIZE = JoinGameResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinGameResponse_Status_descriptor();
template<typename T>
inline const std::string& JoinGameResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinGameResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinGameResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinGameResponse_Status_descriptor(), enum_t_value);
}
inline bool JoinGameResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinGameResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinGameResponse_Status>(
    JoinGameResponse_Status_descriptor(), name, value);
}
// ===================================================================

class GameListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.GameListRequest) */ {
 public:
  inline GameListRequest() : GameListRequest(nullptr) {}
  ~GameListRequest() override;
  explicit constexpr GameListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameListRequest(const GameListRequest& from);
  GameListRequest(GameListRequest&& from) noexcept
    : GameListRequest() {
    *this = ::std::move(from);
  }

  inline GameListRequest& operator=(const GameListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameListRequest& operator=(GameListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameListRequest* internal_default_instance() {
    return reinterpret_cast<const GameListRequest*>(
               &_GameListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameListRequest& a, GameListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GameListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.GameListRequest";
  }
  protected:
  explicit GameListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kMaxGamesFieldNumber = 2,
  };
  // fixed64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional uint32 max_games = 2;
  bool has_max_games() const;
  private:
  bool _internal_has_max_games() const;
  public:
  void clear_max_games();
  uint32_t max_games() const;
  void set_max_games(uint32_t value);
  private:
  uint32_t _internal_max_games() const;
  void _internal_set_max_games(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:afterline.GameListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t session_id_;
  uint32_t max_games_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// -------------------------------------------------------------------

class GameListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.GameListResponse) */ {
 public:
  inline GameListResponse() : GameListResponse(nullptr) {}
  ~GameListResponse() override;
  explicit constexpr GameListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameListResponse(const GameListResponse& from);
  GameListResponse(GameListResponse&& from) noexcept
    : GameListResponse() {
    *this = ::std::move(from);
  }

  inline GameListResponse& operator=(const GameListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameListResponse& operator=(GameListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameListResponse* internal_default_instance() {
    return reinterpret_cast<const GameListResponse*>(
               &_GameListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameListResponse& a, GameListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.GameListResponse";
  }
  protected:
  explicit GameListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdsFieldNumber = 1,
  };
  // repeated fixed64 game_ids = 1;
  int game_ids_size() const;
  private:
  int _internal_game_ids_size() const;
  public:
  void clear_game_ids();
  private:
  uint64_t _internal_game_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_game_ids() const;
  void _internal_add_game_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_game_ids();
  public:
  uint64_t game_ids(int index) const;
  void set_game_ids(int index, uint64_t value);
  void add_game_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      game_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_game_ids();

  // @@protoc_insertion_point(class_scope:afterline.GameListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > game_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// -------------------------------------------------------------------

class GameInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.GameInfoRequest) */ {
 public:
  inline GameInfoRequest() : GameInfoRequest(nullptr) {}
  ~GameInfoRequest() override;
  explicit constexpr GameInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameInfoRequest(const GameInfoRequest& from);
  GameInfoRequest(GameInfoRequest&& from) noexcept
    : GameInfoRequest() {
    *this = ::std::move(from);
  }

  inline GameInfoRequest& operator=(const GameInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfoRequest& operator=(GameInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GameInfoRequest*>(
               &_GameInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameInfoRequest& a, GameInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.GameInfoRequest";
  }
  protected:
  explicit GameInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // fixed64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // fixed64 game_id = 2;
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:afterline.GameInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t session_id_;
  uint64_t game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// -------------------------------------------------------------------

class GameInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.GameInfoResponse) */ {
 public:
  inline GameInfoResponse() : GameInfoResponse(nullptr) {}
  ~GameInfoResponse() override;
  explicit constexpr GameInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameInfoResponse(const GameInfoResponse& from);
  GameInfoResponse(GameInfoResponse&& from) noexcept
    : GameInfoResponse() {
    *this = ::std::move(from);
  }

  inline GameInfoResponse& operator=(const GameInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfoResponse& operator=(GameInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GameInfoResponse*>(
               &_GameInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameInfoResponse& a, GameInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.GameInfoResponse";
  }
  protected:
  explicit GameInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 6,
    kNameFieldNumber = 3,
    kIconSetFieldNumber = 5,
    kGameIdFieldNumber = 1,
    kRulesetIdFieldNumber = 4,
    kAccessLevelFieldNumber = 2,
    kMaxPlayersFieldNumber = 7,
    kGameMasterFieldNumber = 8,
    kRunningFieldNumber = 9,
    kOpenFieldNumber = 10,
  };
  // repeated fixed64 members = 6;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  uint64_t _internal_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_members() const;
  void _internal_add_members(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_members();
  public:
  uint64_t members(int index) const;
  void set_members(int index, uint64_t value);
  void add_members(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_members();

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .afterline.IconSetInfo icon_set = 5;
  bool has_icon_set() const;
  private:
  bool _internal_has_icon_set() const;
  public:
  void clear_icon_set();
  const ::afterline::IconSetInfo& icon_set() const;
  PROTOBUF_NODISCARD ::afterline::IconSetInfo* release_icon_set();
  ::afterline::IconSetInfo* mutable_icon_set();
  void set_allocated_icon_set(::afterline::IconSetInfo* icon_set);
  private:
  const ::afterline::IconSetInfo& _internal_icon_set() const;
  ::afterline::IconSetInfo* _internal_mutable_icon_set();
  public:
  void unsafe_arena_set_allocated_icon_set(
      ::afterline::IconSetInfo* icon_set);
  ::afterline::IconSetInfo* unsafe_arena_release_icon_set();

  // fixed64 game_id = 1;
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // optional fixed64 ruleset_id = 4;
  bool has_ruleset_id() const;
  private:
  bool _internal_has_ruleset_id() const;
  public:
  void clear_ruleset_id();
  uint64_t ruleset_id() const;
  void set_ruleset_id(uint64_t value);
  private:
  uint64_t _internal_ruleset_id() const;
  void _internal_set_ruleset_id(uint64_t value);
  public:

  // int32 access_level = 2;
  void clear_access_level();
  int32_t access_level() const;
  void set_access_level(int32_t value);
  private:
  int32_t _internal_access_level() const;
  void _internal_set_access_level(int32_t value);
  public:

  // optional uint32 max_players = 7;
  bool has_max_players() const;
  private:
  bool _internal_has_max_players() const;
  public:
  void clear_max_players();
  uint32_t max_players() const;
  void set_max_players(uint32_t value);
  private:
  uint32_t _internal_max_players() const;
  void _internal_set_max_players(uint32_t value);
  public:

  // optional fixed64 game_master = 8;
  bool has_game_master() const;
  private:
  bool _internal_has_game_master() const;
  public:
  void clear_game_master();
  uint64_t game_master() const;
  void set_game_master(uint64_t value);
  private:
  uint64_t _internal_game_master() const;
  void _internal_set_game_master(uint64_t value);
  public:

  // optional bool running = 9;
  bool has_running() const;
  private:
  bool _internal_has_running() const;
  public:
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // optional bool open = 10;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:afterline.GameInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::afterline::IconSetInfo* icon_set_;
  uint64_t game_id_;
  uint64_t ruleset_id_;
  int32_t access_level_;
  uint32_t max_players_;
  uint64_t game_master_;
  bool running_;
  bool open_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// -------------------------------------------------------------------

class JoinGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.JoinGameRequest) */ {
 public:
  inline JoinGameRequest() : JoinGameRequest(nullptr) {}
  ~JoinGameRequest() override;
  explicit constexpr JoinGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGameRequest(const JoinGameRequest& from);
  JoinGameRequest(JoinGameRequest&& from) noexcept
    : JoinGameRequest() {
    *this = ::std::move(from);
  }

  inline JoinGameRequest& operator=(const JoinGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameRequest& operator=(JoinGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGameRequest*>(
               &_JoinGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinGameRequest& a, JoinGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinGameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.JoinGameRequest";
  }
  protected:
  explicit JoinGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // fixed64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // fixed64 game_id = 2;
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:afterline.JoinGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t session_id_;
  uint64_t game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// -------------------------------------------------------------------

class JoinGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:afterline.JoinGameResponse) */ {
 public:
  inline JoinGameResponse() : JoinGameResponse(nullptr) {}
  ~JoinGameResponse() override;
  explicit constexpr JoinGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGameResponse(const JoinGameResponse& from);
  JoinGameResponse(JoinGameResponse&& from) noexcept
    : JoinGameResponse() {
    *this = ::std::move(from);
  }

  inline JoinGameResponse& operator=(const JoinGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameResponse& operator=(JoinGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGameResponse*>(
               &_JoinGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinGameResponse& a, JoinGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinGameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "afterline.JoinGameResponse";
  }
  protected:
  explicit JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JoinGameResponse_Status Status;
  static constexpr Status DISALLOWED =
    JoinGameResponse_Status_DISALLOWED;
  static constexpr Status PENDING =
    JoinGameResponse_Status_PENDING;
  static constexpr Status JOINED =
    JoinGameResponse_Status_JOINED;
  static inline bool Status_IsValid(int value) {
    return JoinGameResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    JoinGameResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    JoinGameResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    JoinGameResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return JoinGameResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return JoinGameResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return JoinGameResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // fixed64 game_id = 1;
  void clear_game_id();
  uint64_t game_id() const;
  void set_game_id(uint64_t value);
  private:
  uint64_t _internal_game_id() const;
  void _internal_set_game_id(uint64_t value);
  public:

  // .afterline.JoinGameResponse.Status status = 2;
  void clear_status();
  ::afterline::JoinGameResponse_Status status() const;
  void set_status(::afterline::JoinGameResponse_Status value);
  private:
  ::afterline::JoinGameResponse_Status _internal_status() const;
  void _internal_set_status(::afterline::JoinGameResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:afterline.JoinGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t game_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_afterline_2fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameListRequest

// fixed64 session_id = 1;
inline void GameListRequest::clear_session_id() {
  session_id_ = uint64_t{0u};
}
inline uint64_t GameListRequest::_internal_session_id() const {
  return session_id_;
}
inline uint64_t GameListRequest::session_id() const {
  // @@protoc_insertion_point(field_get:afterline.GameListRequest.session_id)
  return _internal_session_id();
}
inline void GameListRequest::_internal_set_session_id(uint64_t value) {
  
  session_id_ = value;
}
inline void GameListRequest::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:afterline.GameListRequest.session_id)
}

// optional uint32 max_games = 2;
inline bool GameListRequest::_internal_has_max_games() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameListRequest::has_max_games() const {
  return _internal_has_max_games();
}
inline void GameListRequest::clear_max_games() {
  max_games_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t GameListRequest::_internal_max_games() const {
  return max_games_;
}
inline uint32_t GameListRequest::max_games() const {
  // @@protoc_insertion_point(field_get:afterline.GameListRequest.max_games)
  return _internal_max_games();
}
inline void GameListRequest::_internal_set_max_games(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_games_ = value;
}
inline void GameListRequest::set_max_games(uint32_t value) {
  _internal_set_max_games(value);
  // @@protoc_insertion_point(field_set:afterline.GameListRequest.max_games)
}

// -------------------------------------------------------------------

// GameListResponse

// repeated fixed64 game_ids = 1;
inline int GameListResponse::_internal_game_ids_size() const {
  return game_ids_.size();
}
inline int GameListResponse::game_ids_size() const {
  return _internal_game_ids_size();
}
inline void GameListResponse::clear_game_ids() {
  game_ids_.Clear();
}
inline uint64_t GameListResponse::_internal_game_ids(int index) const {
  return game_ids_.Get(index);
}
inline uint64_t GameListResponse::game_ids(int index) const {
  // @@protoc_insertion_point(field_get:afterline.GameListResponse.game_ids)
  return _internal_game_ids(index);
}
inline void GameListResponse::set_game_ids(int index, uint64_t value) {
  game_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:afterline.GameListResponse.game_ids)
}
inline void GameListResponse::_internal_add_game_ids(uint64_t value) {
  game_ids_.Add(value);
}
inline void GameListResponse::add_game_ids(uint64_t value) {
  _internal_add_game_ids(value);
  // @@protoc_insertion_point(field_add:afterline.GameListResponse.game_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GameListResponse::_internal_game_ids() const {
  return game_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GameListResponse::game_ids() const {
  // @@protoc_insertion_point(field_list:afterline.GameListResponse.game_ids)
  return _internal_game_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GameListResponse::_internal_mutable_game_ids() {
  return &game_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GameListResponse::mutable_game_ids() {
  // @@protoc_insertion_point(field_mutable_list:afterline.GameListResponse.game_ids)
  return _internal_mutable_game_ids();
}

// -------------------------------------------------------------------

// GameInfoRequest

// fixed64 session_id = 1;
inline void GameInfoRequest::clear_session_id() {
  session_id_ = uint64_t{0u};
}
inline uint64_t GameInfoRequest::_internal_session_id() const {
  return session_id_;
}
inline uint64_t GameInfoRequest::session_id() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoRequest.session_id)
  return _internal_session_id();
}
inline void GameInfoRequest::_internal_set_session_id(uint64_t value) {
  
  session_id_ = value;
}
inline void GameInfoRequest::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoRequest.session_id)
}

// fixed64 game_id = 2;
inline void GameInfoRequest::clear_game_id() {
  game_id_ = uint64_t{0u};
}
inline uint64_t GameInfoRequest::_internal_game_id() const {
  return game_id_;
}
inline uint64_t GameInfoRequest::game_id() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoRequest.game_id)
  return _internal_game_id();
}
inline void GameInfoRequest::_internal_set_game_id(uint64_t value) {
  
  game_id_ = value;
}
inline void GameInfoRequest::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoRequest.game_id)
}

// -------------------------------------------------------------------

// GameInfoResponse

// fixed64 game_id = 1;
inline void GameInfoResponse::clear_game_id() {
  game_id_ = uint64_t{0u};
}
inline uint64_t GameInfoResponse::_internal_game_id() const {
  return game_id_;
}
inline uint64_t GameInfoResponse::game_id() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.game_id)
  return _internal_game_id();
}
inline void GameInfoResponse::_internal_set_game_id(uint64_t value) {
  
  game_id_ = value;
}
inline void GameInfoResponse::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.game_id)
}

// int32 access_level = 2;
inline void GameInfoResponse::clear_access_level() {
  access_level_ = 0;
}
inline int32_t GameInfoResponse::_internal_access_level() const {
  return access_level_;
}
inline int32_t GameInfoResponse::access_level() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.access_level)
  return _internal_access_level();
}
inline void GameInfoResponse::_internal_set_access_level(int32_t value) {
  
  access_level_ = value;
}
inline void GameInfoResponse::set_access_level(int32_t value) {
  _internal_set_access_level(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.access_level)
}

// optional string name = 3;
inline bool GameInfoResponse::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameInfoResponse::has_name() const {
  return _internal_has_name();
}
inline void GameInfoResponse::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameInfoResponse::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.name)
}
inline std::string* GameInfoResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:afterline.GameInfoResponse.name)
  return _s;
}
inline const std::string& GameInfoResponse::_internal_name() const {
  return name_.Get();
}
inline void GameInfoResponse::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameInfoResponse::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:afterline.GameInfoResponse.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:afterline.GameInfoResponse.name)
}

// optional fixed64 ruleset_id = 4;
inline bool GameInfoResponse::_internal_has_ruleset_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameInfoResponse::has_ruleset_id() const {
  return _internal_has_ruleset_id();
}
inline void GameInfoResponse::clear_ruleset_id() {
  ruleset_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t GameInfoResponse::_internal_ruleset_id() const {
  return ruleset_id_;
}
inline uint64_t GameInfoResponse::ruleset_id() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.ruleset_id)
  return _internal_ruleset_id();
}
inline void GameInfoResponse::_internal_set_ruleset_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  ruleset_id_ = value;
}
inline void GameInfoResponse::set_ruleset_id(uint64_t value) {
  _internal_set_ruleset_id(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.ruleset_id)
}

// optional .afterline.IconSetInfo icon_set = 5;
inline bool GameInfoResponse::_internal_has_icon_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || icon_set_ != nullptr);
  return value;
}
inline bool GameInfoResponse::has_icon_set() const {
  return _internal_has_icon_set();
}
inline const ::afterline::IconSetInfo& GameInfoResponse::_internal_icon_set() const {
  const ::afterline::IconSetInfo* p = icon_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::afterline::IconSetInfo&>(
      ::afterline::_IconSetInfo_default_instance_);
}
inline const ::afterline::IconSetInfo& GameInfoResponse::icon_set() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.icon_set)
  return _internal_icon_set();
}
inline void GameInfoResponse::unsafe_arena_set_allocated_icon_set(
    ::afterline::IconSetInfo* icon_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icon_set_);
  }
  icon_set_ = icon_set;
  if (icon_set) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:afterline.GameInfoResponse.icon_set)
}
inline ::afterline::IconSetInfo* GameInfoResponse::release_icon_set() {
  _has_bits_[0] &= ~0x00000002u;
  ::afterline::IconSetInfo* temp = icon_set_;
  icon_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::afterline::IconSetInfo* GameInfoResponse::unsafe_arena_release_icon_set() {
  // @@protoc_insertion_point(field_release:afterline.GameInfoResponse.icon_set)
  _has_bits_[0] &= ~0x00000002u;
  ::afterline::IconSetInfo* temp = icon_set_;
  icon_set_ = nullptr;
  return temp;
}
inline ::afterline::IconSetInfo* GameInfoResponse::_internal_mutable_icon_set() {
  _has_bits_[0] |= 0x00000002u;
  if (icon_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::afterline::IconSetInfo>(GetArenaForAllocation());
    icon_set_ = p;
  }
  return icon_set_;
}
inline ::afterline::IconSetInfo* GameInfoResponse::mutable_icon_set() {
  ::afterline::IconSetInfo* _msg = _internal_mutable_icon_set();
  // @@protoc_insertion_point(field_mutable:afterline.GameInfoResponse.icon_set)
  return _msg;
}
inline void GameInfoResponse::set_allocated_icon_set(::afterline::IconSetInfo* icon_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(icon_set_);
  }
  if (icon_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icon_set));
    if (message_arena != submessage_arena) {
      icon_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icon_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_set_ = icon_set;
  // @@protoc_insertion_point(field_set_allocated:afterline.GameInfoResponse.icon_set)
}

// repeated fixed64 members = 6;
inline int GameInfoResponse::_internal_members_size() const {
  return members_.size();
}
inline int GameInfoResponse::members_size() const {
  return _internal_members_size();
}
inline void GameInfoResponse::clear_members() {
  members_.Clear();
}
inline uint64_t GameInfoResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline uint64_t GameInfoResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.members)
  return _internal_members(index);
}
inline void GameInfoResponse::set_members(int index, uint64_t value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.members)
}
inline void GameInfoResponse::_internal_add_members(uint64_t value) {
  members_.Add(value);
}
inline void GameInfoResponse::add_members(uint64_t value) {
  _internal_add_members(value);
  // @@protoc_insertion_point(field_add:afterline.GameInfoResponse.members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GameInfoResponse::_internal_members() const {
  return members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GameInfoResponse::members() const {
  // @@protoc_insertion_point(field_list:afterline.GameInfoResponse.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GameInfoResponse::_internal_mutable_members() {
  return &members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GameInfoResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:afterline.GameInfoResponse.members)
  return _internal_mutable_members();
}

// optional uint32 max_players = 7;
inline bool GameInfoResponse::_internal_has_max_players() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameInfoResponse::has_max_players() const {
  return _internal_has_max_players();
}
inline void GameInfoResponse::clear_max_players() {
  max_players_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t GameInfoResponse::_internal_max_players() const {
  return max_players_;
}
inline uint32_t GameInfoResponse::max_players() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.max_players)
  return _internal_max_players();
}
inline void GameInfoResponse::_internal_set_max_players(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  max_players_ = value;
}
inline void GameInfoResponse::set_max_players(uint32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.max_players)
}

// optional fixed64 game_master = 8;
inline bool GameInfoResponse::_internal_has_game_master() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameInfoResponse::has_game_master() const {
  return _internal_has_game_master();
}
inline void GameInfoResponse::clear_game_master() {
  game_master_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t GameInfoResponse::_internal_game_master() const {
  return game_master_;
}
inline uint64_t GameInfoResponse::game_master() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.game_master)
  return _internal_game_master();
}
inline void GameInfoResponse::_internal_set_game_master(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  game_master_ = value;
}
inline void GameInfoResponse::set_game_master(uint64_t value) {
  _internal_set_game_master(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.game_master)
}

// optional bool running = 9;
inline bool GameInfoResponse::_internal_has_running() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameInfoResponse::has_running() const {
  return _internal_has_running();
}
inline void GameInfoResponse::clear_running() {
  running_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool GameInfoResponse::_internal_running() const {
  return running_;
}
inline bool GameInfoResponse::running() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.running)
  return _internal_running();
}
inline void GameInfoResponse::_internal_set_running(bool value) {
  _has_bits_[0] |= 0x00000020u;
  running_ = value;
}
inline void GameInfoResponse::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.running)
}

// optional bool open = 10;
inline bool GameInfoResponse::_internal_has_open() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GameInfoResponse::has_open() const {
  return _internal_has_open();
}
inline void GameInfoResponse::clear_open() {
  open_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool GameInfoResponse::_internal_open() const {
  return open_;
}
inline bool GameInfoResponse::open() const {
  // @@protoc_insertion_point(field_get:afterline.GameInfoResponse.open)
  return _internal_open();
}
inline void GameInfoResponse::_internal_set_open(bool value) {
  _has_bits_[0] |= 0x00000040u;
  open_ = value;
}
inline void GameInfoResponse::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:afterline.GameInfoResponse.open)
}

// -------------------------------------------------------------------

// JoinGameRequest

// fixed64 session_id = 1;
inline void JoinGameRequest::clear_session_id() {
  session_id_ = uint64_t{0u};
}
inline uint64_t JoinGameRequest::_internal_session_id() const {
  return session_id_;
}
inline uint64_t JoinGameRequest::session_id() const {
  // @@protoc_insertion_point(field_get:afterline.JoinGameRequest.session_id)
  return _internal_session_id();
}
inline void JoinGameRequest::_internal_set_session_id(uint64_t value) {
  
  session_id_ = value;
}
inline void JoinGameRequest::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:afterline.JoinGameRequest.session_id)
}

// fixed64 game_id = 2;
inline void JoinGameRequest::clear_game_id() {
  game_id_ = uint64_t{0u};
}
inline uint64_t JoinGameRequest::_internal_game_id() const {
  return game_id_;
}
inline uint64_t JoinGameRequest::game_id() const {
  // @@protoc_insertion_point(field_get:afterline.JoinGameRequest.game_id)
  return _internal_game_id();
}
inline void JoinGameRequest::_internal_set_game_id(uint64_t value) {
  
  game_id_ = value;
}
inline void JoinGameRequest::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:afterline.JoinGameRequest.game_id)
}

// -------------------------------------------------------------------

// JoinGameResponse

// fixed64 game_id = 1;
inline void JoinGameResponse::clear_game_id() {
  game_id_ = uint64_t{0u};
}
inline uint64_t JoinGameResponse::_internal_game_id() const {
  return game_id_;
}
inline uint64_t JoinGameResponse::game_id() const {
  // @@protoc_insertion_point(field_get:afterline.JoinGameResponse.game_id)
  return _internal_game_id();
}
inline void JoinGameResponse::_internal_set_game_id(uint64_t value) {
  
  game_id_ = value;
}
inline void JoinGameResponse::set_game_id(uint64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:afterline.JoinGameResponse.game_id)
}

// .afterline.JoinGameResponse.Status status = 2;
inline void JoinGameResponse::clear_status() {
  status_ = 0;
}
inline ::afterline::JoinGameResponse_Status JoinGameResponse::_internal_status() const {
  return static_cast< ::afterline::JoinGameResponse_Status >(status_);
}
inline ::afterline::JoinGameResponse_Status JoinGameResponse::status() const {
  // @@protoc_insertion_point(field_get:afterline.JoinGameResponse.status)
  return _internal_status();
}
inline void JoinGameResponse::_internal_set_status(::afterline::JoinGameResponse_Status value) {
  
  status_ = value;
}
inline void JoinGameResponse::set_status(::afterline::JoinGameResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:afterline.JoinGameResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace afterline

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::afterline::JoinGameResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::afterline::JoinGameResponse_Status>() {
  return ::afterline::JoinGameResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_afterline_2fgame_2eproto
